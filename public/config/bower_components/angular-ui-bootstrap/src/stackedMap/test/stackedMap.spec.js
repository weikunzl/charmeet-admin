describe("stacked map",function(){var e;beforeEach(module("ui.bootstrap.modal")),beforeEach(inject(function(o){e=o.createNew()})),it("should add and remove objects by key",function(){e.add("foo","foo_value"),expect(e.length()).toEqual(1),expect(e.get("foo").key).toEqual("foo"),expect(e.get("foo").value).toEqual("foo_value"),e.remove("foo"),expect(e.length()).toEqual(0),expect(e.get("foo")).toBeUndefined()}),it("should support listing keys",function(){e.add("foo","foo_value"),e.add("bar","bar_value"),expect(e.keys()).toEqual(["foo","bar"])}),it("should get topmost element",function(){e.add("foo","foo_value"),e.add("bar","bar_value"),expect(e.length()).toEqual(2),expect(e.top().key).toEqual("bar"),expect(e.length()).toEqual(2)}),it("should remove topmost element",function(){e.add("foo","foo_value"),e.add("bar","bar_value"),expect(e.removeTop().key).toEqual("bar"),expect(e.removeTop().key).toEqual("foo")}),it("should preserve semantic of an empty stackedMap",function(){expect(e.length()).toEqual(0),expect(e.top()).toBeUndefined()}),it("should ignore removal of non-existing elements",function(){expect(e.remove("non-existing")).toBeUndefined()})});