describe("tooltip directive",function(){function t(t){var e=i("<div>"+t+"</div>")(n);return n.$digest(),e}function e(t,e,n){o(t,e||"mouseleave"),t.scope().$$childTail.$digest(),n||s.flush()}function o(t,e){t.trigger(e),t.scope().$$childTail.$digest()}var n,i,p,s;beforeEach(module("ui.bootstrap.tooltip")),beforeEach(module("uib/template/tooltip/tooltip-popup.html")),beforeEach(module("uib/template/tooltip/tooltip-template-popup.html")),beforeEach(module("uib/template/tooltip/tooltip-html-popup.html")),beforeEach(inject(function(t,e,o,l){n=t,i=e,p=o,s=l})),beforeEach(function(){jasmine.addMatchers({toHaveOpenTooltips:function(t,e){return{compare:function(o,n){var i=o.find("div.tooltip");n=n||1;var p={pass:t.equals(i.length,n,e)};return p.pass?p.message='Expected "'+angular.mock.dump(i)+'" not to have "'+i.length+'" opened tooltips.':p.message='Expected "'+angular.mock.dump(i)+'" to have "'+i.length+'" opened tooltips.',p}}}})}),afterEach(function(){p.off("keypress")}),describe("basic scenarios with default options",function(){it("shows default tooltip on mouse enter and closes on mouse leave",function(){var n=t('<span uib-tooltip="tooltip text">Trigger here</span>');o(n.find("span"),"mouseenter"),expect(n).toHaveOpenTooltips(),e(n.find("span")),expect(n).not.toHaveOpenTooltips()}),it("should not show a tooltip when its content is empty",function(){var e=t('<span uib-tooltip=""></span>');o(e.find("span"),"mouseenter"),expect(e).not.toHaveOpenTooltips()}),it("should not show a tooltip when its content becomes empty",function(){n.content="some text";var e=t('<span uib-tooltip="{{ content }}"></span>');o(e.find("span"),"mouseenter"),expect(e).toHaveOpenTooltips(),n.content="",n.$digest(),s.flush(),expect(e).not.toHaveOpenTooltips()}),it("should update tooltip when its content becomes empty",function(){n.content="some text";var e=t('<span uib-tooltip="{{ content }}"></span>');n.content="",n.$digest(),o(e.find("span"),"mouseenter"),expect(e).not.toHaveOpenTooltips()})}),describe("option by option",function(){var i={tooltip:'uib-tooltip="tooltip text"',"tooltip-html":'uib-tooltip-html="tooltipSafeHtml"',"tooltip-template":"uib-tooltip-template=\"'tooltipTextUrl'\""};beforeEach(inject(function(t,e){n.tooltipText="tooltip text",n.tooltipSafeHtml=t.trustAsHtml("tooltip text"),e.put("tooltipTextUrl",[200,"<span>tooltip text</span>",{}])})),angular.forEach(i,function(n,i){describe(i,function(){describe("placement",function(){it("can specify an alternative, valid placement",function(){var i=t("<span "+n+' tooltip-placement="left">Trigger here</span>');o(i.find("span"),"mouseenter");var p=i.find("div.tooltip");expect(i).toHaveOpenTooltips(),expect(p).toHaveClass("left"),e(i.find("span")),expect(i).not.toHaveOpenTooltips()})}),describe("class",function(){it("can specify a custom class",function(){var i=t("<span "+n+' tooltip-class="custom">Trigger here</span>');o(i.find("span"),"mouseenter");var p=i.find("div.tooltip");expect(i).toHaveOpenTooltips(),expect(p).toHaveClass("custom"),e(i.find("span")),expect(i).not.toHaveOpenTooltips()})})})})}),it("should show even after close trigger is called multiple times - issue #1847",function(){var n=t('<span uib-tooltip="tooltip text">Trigger here</span>');o(n.find("span"),"mouseenter"),expect(n).toHaveOpenTooltips(),e(n.find("span"),null,!0),e(n.find("span"),null,!0),expect(n).toHaveOpenTooltips(),o(n.find("span"),"mouseenter"),expect(n).toHaveOpenTooltips(),s.flush(),expect(n).toHaveOpenTooltips()}),it("should hide even after show trigger is called multiple times",function(){var n=t('<span uib-tooltip="tooltip text" tooltip-popup-delay="1000">Trigger here</span>');o(n.find("span"),"mouseenter"),o(n.find("span"),"mouseenter"),e(n.find("span")),expect(n).not.toHaveOpenTooltips()}),it("should not show tooltips element is disabled (button) - issue #3167",function(){var e=t('<button uib-tooltip="cancel!" ng-disabled="disabled" ng-click="disabled = true">Cancel</button>');o(e.find("button"),"mouseenter"),expect(e).toHaveOpenTooltips(),o(e.find("button"),"click"),s.flush(),expect(e).not.toHaveOpenTooltips()})});