describe("uib-accordion",function(){var e,o;beforeEach(module("ui.bootstrap.accordion")),beforeEach(module("ngAnimateMock")),beforeEach(module("uib/template/accordion/accordion.html")),beforeEach(module("uib/template/accordion/accordion-group.html")),beforeEach(inject(function(t,n){e=t,o=n})),describe("controller",function(){var e,t;beforeEach(inject(function(n){t={},e=n("UibAccordionController",{$scope:o,$attrs:t})})),describe("addGroup",function(){it("adds a the specified panel to the collection",function(){var t,n;e.addGroup(t=o.$new()),e.addGroup(n=o.$new()),expect(e.groups.length).toBe(2),expect(e.groups[0]).toBe(t),expect(e.groups[1]).toBe(n)})}),describe("closeOthers",function(){var o,n,i;beforeEach(function(){e.addGroup(o={isOpen:!0,$on:angular.noop}),e.addGroup(n={isOpen:!0,$on:angular.noop}),e.addGroup(i={isOpen:!0,$on:angular.noop})}),it("should close other panels if close-others attribute is not defined",function(){delete t.closeOthers,e.closeOthers(n),expect(o.isOpen).toBe(!1),expect(n.isOpen).toBe(!0),expect(i.isOpen).toBe(!1)}),it("should close other panels if close-others attribute is true",function(){t.closeOthers="true",e.closeOthers(i),expect(o.isOpen).toBe(!1),expect(n.isOpen).toBe(!1),expect(i.isOpen).toBe(!0)}),it("should not close other panels if close-others attribute is false",function(){t.closeOthers="false",e.closeOthers(n),expect(o.isOpen).toBe(!0),expect(n.isOpen).toBe(!0),expect(i.isOpen).toBe(!0)}),describe("setting accordionConfig",function(){var t;beforeEach(inject(function(e){t=e.closeOthers,e.closeOthers=!1})),afterEach(inject(function(e){e.closeOthers=t})),it("should not close other panels if accordionConfig.closeOthers is false",function(){e.closeOthers(n),expect(o.isOpen).toBe(!0),expect(n.isOpen).toBe(!0),expect(i.isOpen).toBe(!0)})})}),describe("removeGroup",function(){it("should remove the specified panel",function(){var t,n,i;e.addGroup(t=o.$new()),e.addGroup(n=o.$new()),e.addGroup(i=o.$new()),e.removeGroup(n),expect(e.groups.length).toBe(2),expect(e.groups[0]).toBe(t),expect(e.groups[1]).toBe(i)}),it("should ignore remove of non-existing panel",function(){var t,n;e.addGroup(t=o.$new()),e.addGroup(n=o.$new()),expect(e.groups.length).toBe(2),e.removeGroup({}),expect(e.groups.length).toBe(2)}),it("should remove a panel when the scope is destroyed",function(){var t,n,i;e.addGroup(t=o.$new()),e.addGroup(n=o.$new()),e.addGroup(i=o.$new()),n.$destroy(),expect(e.groups.length).toBe(2),expect(e.groups[0]).toBe(t),expect(e.groups[1]).toBe(i)})})}),describe("uib-accordion",function(){var e,o,t,n;beforeEach(inject(function(n,i,c){e=n,o=i,t=c})),it("should be a tablist",function(){n=o("<uib-accordion></uib-accordion>")(e),e.$digest(),expect(n.html()).toContain('role="tablist"')}),it("should expose the controller on the view",function(){t.put("uib/template/accordion/accordion.html","<div>{{accordion.text}}</div>"),n=o("<uib-accordion></uib-accordion>")(e),e.$digest();var i=n.controller("uibAccordion");expect(i).toBeDefined(),i.text="foo",e.$digest(),expect(n.html()).toBe('<div class="ng-binding">foo</div>')}),it("should allow custom templates",function(){t.put("foo/bar.html","<div>baz</div>"),n=o('<uib-accordion template-url="foo/bar.html"></uib-accordion>')(e),e.$digest(),expect(n.html()).toBe("<div>baz</div>")})}),describe("uib-accordion-group",function(){function o(){var e='<uib-accordion ng-init="a = [1,2,3]"><uib-accordion-group heading="I get overridden" is-disabled="true"><uib-accordion-heading>Heading Element <span ng-repeat="x in a">{{x}}</span> </uib-accordion-heading>Body</uib-accordion-group></uib-accordion>';t.disabled=!0,i=n(e)(t),t.$digest(),c=i.find(".panel"),expect(d(0).find("span").hasClass("text-muted")).toBe(!0)}var t,n,i,c,a=function(e){return c.eq(e).find(".panel-heading").eq(0)},d=function(e){return c.eq(e).find(".accordion-toggle").eq(0)},s=function(e){return c.eq(e).find(".panel-collapse").eq(0)};beforeEach(inject(function(e,o){t=e,n=o})),it("should allow custom templates",inject(function(e){e.put("foo/bar.html","<div>baz</div>");var o='<uib-accordion><uib-accordion-group heading="title 1" template-url="foo/bar.html"></uib-accordion-group></uib-accordion>';i=n(o)(t),t.$digest(),expect(i.find("[template-url]").html()).toBe("baz")})),describe("with static panels",function(){beforeEach(function(){spyOn(Math,"random").and.returnValue(.1);var e='<uib-accordion><uib-accordion-group heading="title 1">Content 1</uib-accordion-group><uib-accordion-group heading="title 2">Content 2</uib-accordion-group></uib-accordion>';i=angular.element(e),n(i)(t),t.$digest(),c=i.find(".panel")}),afterEach(function(){i.remove()}),it("should create accordion panels with content",function(){expect(c.length).toEqual(2),expect(d(0).text()).toEqual("title 1"),expect(s(0).text().trim()).toEqual("Content 1"),expect(d(1).text()).toEqual("title 2"),expect(s(1).text().trim()).toEqual("Content 2")}),it("should change selected element on click",function(){d(0).click(),t.$digest(),expect(s(0).scope().isOpen).toBe(!0),expect(a(0).html()).toContain('aria-expanded="true"'),d(1).click(),t.$digest(),expect(s(0).scope().isOpen).toBe(!1),expect(a(0).html()).toContain('aria-expanded="false"'),expect(s(1).scope().isOpen).toBe(!0),expect(a(1).html()).toContain('aria-expanded="true"')}),it("should toggle element on click",function(){d(0).click(),t.$digest(),expect(s(0).scope().isOpen).toBe(!0),expect(c.eq(0).html()).toContain('aria-hidden="false"'),d(0).click(),t.$digest(),expect(s(0).scope().isOpen).toBe(!1),expect(c.eq(0).html()).toContain('aria-hidden="true"')}),it('should add, by default, "panel-open" when opened',function(){var e=c.eq(0);d(0).click(),t.$digest(),expect(e).toHaveClass("panel-open"),d(0).click(),t.$digest(),expect(e).not.toHaveClass("panel-open")}),it("should toggle element on spacebar when focused",function(){var e=c.eq(0);d(0)[0].focus();var o=$.Event("keypress");o.which=32,d(0).trigger(o),expect(e).toHaveClass("panel-open"),o=$.Event("keypress"),o.which=32,d(0).trigger(o),expect(e).not.toHaveClass("panel-open")}),it("should not toggle with any other keyCode",function(){var e=c.eq(0);d(0)[0].focus();var o=$.Event("keypress");o.which=65,d(0).trigger(o),expect(e).not.toHaveClass("panel-open")}),it("should generate an Id for the heading",function(){var e=s(0).scope();expect(e.headingId).toEqual("accordiongroup-"+e.$id+"-1000-tab")}),it("should generate an Id for the panel",function(){var e=s(0).scope();expect(e.panelId).toEqual("accordiongroup-"+e.$id+"-1000-panel")})}),describe("with open-class attribute",function(){beforeEach(function(){var e='<uib-accordion><uib-accordion-group heading="title 1" open-class="custom-open-class">Content 1</uib-accordion-group><uib-accordion-group heading="title 2" open-class="custom-open-class">Content 2</uib-accordion-group></uib-accordion>';i=angular.element(e),n(i)(t),t.$digest(),c=i.find(".panel")}),afterEach(function(){i.remove()}),it("should add custom-open-class when opened",function(){var e=c.eq(0);d(0).click(),t.$digest(),expect(e).toHaveClass("custom-open-class"),d(0).click(),t.$digest(),expect(e).not.toHaveClass("custom-open-class")})}),describe("with dynamic panels",function(){var e;beforeEach(function(){var o='<uib-accordion><uib-accordion-group ng-repeat="group in groups" heading="{{group.name}}">{{group.content}}</uib-accordion-group></uib-accordion>';i=angular.element(o),e=[{name:"title 1",content:"Content 1"},{name:"title 2",content:"Content 2"}],n(i)(t),t.$digest()}),it("should have no panels initially",function(){c=i.find(".panel"),expect(c.length).toEqual(0)}),it("should have a panel for each model item",function(){t.groups=e,t.$digest(),c=i.find(".panel"),expect(c.length).toEqual(2),expect(d(0).text()).toEqual("title 1"),expect(s(0).text().trim()).toEqual("Content 1"),expect(d(1).text()).toEqual("title 2"),expect(s(1).text().trim()).toEqual("Content 2")}),it("should react properly on removing items from the model",function(){t.groups=e,t.$digest(),c=i.find(".panel"),expect(c.length).toEqual(2),t.groups.splice(0,1),t.$digest(),c=i.find(".panel"),expect(c.length).toEqual(1)})}),describe("is-open attribute",function(){beforeEach(function(){var e='<uib-accordion><uib-accordion-group heading="title 1" is-open="open.first">Content 1</uib-accordion-group><uib-accordion-group heading="title 2" is-open="open.second">Content 2</uib-accordion-group></uib-accordion>';i=angular.element(e),t.open={first:!1,second:!0},n(i)(t),t.$digest(),c=i.find(".panel")}),it("should open the panel with isOpen set to true",function(){expect(s(0).scope().isOpen).toBe(!1),expect(s(1).scope().isOpen).toBe(!0)}),it("should toggle variable on element click",function(){d(0).click(),t.$digest(),expect(t.open.first).toBe(!0),d(0).click(),t.$digest(),expect(t.open.second).toBe(!1)})}),describe("is-open attribute with dynamic content",function(){beforeEach(function(){var o='<uib-accordion><uib-accordion-group heading="title 1" is-open="open1"><div ng-repeat="item in items">{{item}}</div></uib-accordion-group><uib-accordion-group heading="title 2" is-open="open2">Static content</uib-accordion-group></uib-accordion>';i=angular.element(o),t.items=["Item 1","Item 2","Item 3"],t.open1=!0,t.open2=!1,angular.element(document.body).append(i),n(i)(t),t.$digest(),e.flush(),c=i.find(".panel")}),afterEach(function(){i.remove()}),it("should have visible panel body when the group with isOpen set to true",function(){expect(s(0)).toHaveClass("in"),expect(s(1)).not.toHaveClass("in")})}),describe("is-open attribute with dynamic groups",function(){beforeEach(function(){var e='<uib-accordion><uib-accordion-group ng-repeat="group in groups" heading="{{group.name}}" is-open="group.open">{{group.content}}</uib-accordion-group></uib-accordion>';i=angular.element(e),t.groups=[{name:"title 1",content:"Content 1",open:!1},{name:"title 2",content:"Content 2",open:!0}],n(i)(t),t.$digest(),c=i.find(".panel")}),it("should have visible group body when the group with isOpen set to true",function(){expect(s(0).scope().isOpen).toBe(!1),expect(s(1).scope().isOpen).toBe(!0)}),it("should toggle element on click",function(){d(0).click(),t.$digest(),expect(s(0).scope().isOpen).toBe(!0),expect(t.groups[0].open).toBe(!0),d(0).click(),t.$digest(),expect(s(0).scope().isOpen).toBe(!1),expect(t.groups[0].open).toBe(!1)})}),describe("is-open attribute with custom class",function(){beforeEach(function(){var e='<uib-accordion><uib-accordion-group ng-repeat="group in groups" heading="{{group.name}}" is-open="group.open" class="testClass">{{group.content}}</uib-accordion-group></uib-accordion>';i=angular.element(e),t.groups=[{name:"title 1",content:"Content 1",open:!1},{name:"title 2",content:"Content 2",open:!0}],n(i)(t),t.$digest(),c=i.find(".panel")}),it('should add "panel-open" class',function(){expect(c.eq(0)).not.toHaveClass("panel-open"),expect(c.eq(1)).toHaveClass("panel-open")})}),describe("`is-disabled` attribute",function(){var e;beforeEach(function(){var o='<uib-accordion><uib-accordion-group heading="title 1" is-disabled="disabled">Content 1</uib-accordion-group></uib-accordion>';i=angular.element(o),t.disabled=!0,n(i)(t),t.$digest(),c=i.find(".panel"),e=s(0)}),it("should open the panel with isOpen set to true",function(){expect(e.scope().isOpen).toBeFalsy()}),it("should not toggle if disabled",function(){d(0).click(),t.$digest(),expect(e.scope().isOpen).toBeFalsy()}),it("should toggle after enabling",function(){t.disabled=!1,t.$digest(),expect(e.scope().isOpen).toBeFalsy(),d(0).click(),t.$digest(),expect(e.scope().isOpen).toBeTruthy()}),it("should have text-muted styling",function(){expect(d(0).find("span:first")).toHaveClass("text-muted")})}),describe("uib-accordion-heading element",function(){beforeEach(function(){var e='<uib-accordion ng-init="a = [1,2,3]"><uib-accordion-group heading="I get overridden"><uib-accordion-heading>Heading Element <span ng-repeat="x in a">{{x}}</span> </uib-accordion-heading>Body</uib-accordion-group></uib-accordion>';i=n(e)(t),t.$digest(),c=i.find(".panel")}),it("transcludes the <uib-accordion-heading> content into the heading link",function(){expect(d(0).text()).toBe("Heading Element 123 ")}),it("attaches the same scope to the transcluded heading and body",function(){expect(d(0).find("span.ng-scope").scope().$id).toBe(s(0).find("span").scope().$id)}),it("should wrap the transcluded content in a span",function(){expect(d(0).find("span:first").length).toEqual(1)}),it("should have disabled styling when is-disabled is true",o)}),describe("uib-accordion-heading attribute",function(){beforeEach(function(){var e='<uib-accordion ng-init="a = [1,2,3]"><uib-accordion-group heading="I get overridden"><div uib-accordion-heading>Heading Element <span ng-repeat="x in a">{{x}}</span> </div>Body</uib-accordion-group></uib-accordion>';i=n(e)(t),t.$digest(),c=i.find(".panel")}),it("transcludes the <uib-accordion-heading> content into the heading link",function(){expect(d(0).text()).toBe("Heading Element 123 ")}),it("attaches the same scope to the transcluded heading and body",function(){expect(d(0).find("span.ng-scope").scope().$id).toBe(s(0).find("span").scope().$id)}),it("should have disabled styling when is-disabled is true",o)}),describe("uib-accordion-heading, with repeating uib-accordion-groups",function(){it("should clone the uib-accordion-heading for each group",function(){i=n('<uib-accordion><uib-accordion-group ng-repeat="x in [1,2,3]"><uib-accordion-heading>{{x}}</uib-accordion-heading></uib-accordion-group></uib-accordion>')(t),t.$digest(),c=i.find(".panel"),expect(c.length).toBe(3),expect(d(0).text()).toBe("1"),expect(d(1).text()).toBe("2"),expect(d(2).text()).toBe("3")})}),describe("uib-accordion-heading attribute, with repeating uib-accordion-groups",function(){it("should clone the uib-accordion-heading for each group",function(){i=n('<uib-accordion><uib-accordion-group ng-repeat="x in [1,2,3]"><div uib-accordion-heading>{{x}}</div></uib-accordion-group></uib-accordion>')(t),t.$digest(),c=i.find(".panel"),expect(c.length).toBe(3),expect(d(0).text()).toBe("1"),expect(d(1).text()).toBe("2"),expect(d(2).text()).toBe("3")})}),describe("uib-accordion group panel class",function(){it("should use the default value when panel class is falsy - #3968",function(){i=n('<uib-accordion><uib-accordion-group heading="Heading">Content</uib-accordion-group></uib-accordion>')(t),t.$digest(),c=i.find(".panel"),expect(c.eq(0)).toHaveClass("panel-default"),i=n('<uib-accordion><uib-accordion-group heading="Heading" panel-class="">Content</uib-accordion-group></uib-accordion>')(t),t.$digest(),c=i.find(".panel"),expect(c.eq(0)).toHaveClass("panel-default")}),it("should use the specified value when not falsy - #3968",function(){i=n('<uib-accordion><uib-accordion-group heading="Heading" panel-class="custom-class">Content</uib-accordion-group></uib-accordion>')(t),t.$digest(),c=i.find(".panel"),expect(c.eq(0)).toHaveClass("custom-class"),expect(c.eq(0)).not.toHaveClass("panel-default")}),it("should change class if panel-class is changed",function(){i=n('<uib-accordion><uib-accordion-group heading="Heading" panel-class="{{panelClass}}">Content</uib-accordion-group></uib-accordion>')(t),t.panelClass="custom-class",t.$digest(),c=i.find(".panel"),expect(c.eq(0)).toHaveClass("custom-class"),t.panelClass="different-class",t.$digest(),expect(c.eq(0)).toHaveClass("different-class"),expect(c.eq(0)).not.toHaveClass("custom-class")})})})});