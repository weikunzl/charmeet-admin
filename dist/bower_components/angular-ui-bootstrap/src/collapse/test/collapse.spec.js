describe("collapse directive",function(){function e(){o.collapsing=jasmine.createSpy("scope.collapsing"),o.collapsed=jasmine.createSpy("scope.collapsed"),o.expanding=jasmine.createSpy("scope.expanding"),o.expanded=jasmine.createSpy("scope.expanded")}function t(e){["collapsing","collapsed","expanding","expanded"].forEach(function(t){e[t]?expect(o[t]).toHaveBeenCalled():expect(o[t]).not.toHaveBeenCalled()})}var i,a,o,n,s,l;beforeEach(module("ui.bootstrap.collapse")),beforeEach(module("ngAnimateMock")),beforeEach(inject(function(e,t,i,a){o=e,n=t,s=i,l=a})),beforeEach(function(){i=angular.element('<div uib-collapse="isCollapsed" expanding="expanding()" expanded="expanded()" collapsing="collapsing()" collapsed="collapsed()">Some Content</div>'),a=n(i),angular.element(document.body).append(i)}),afterEach(function(){i.remove()}),it("should be hidden on initialization if isCollapsed = true",function(){e(),o.isCollapsed=!0,a(o),o.$digest(),expect(i.height()).toBe(0),t({collapsed:!0})}),it("should not trigger any animation on initialization if isCollapsed = true",function(){var e=function(){s.flush()};o.isCollapsed=!0,a(o),o.$digest(),expect(e).toThrowError(/No pending animations ready to be closed or flushed/)}),it("should collapse if isCollapsed = true on subsequent use",function(){o.isCollapsed=!1,a(o),o.$digest(),e(),o.isCollapsed=!0,o.$digest(),s.flush(),expect(i.height()).toBe(0),t({collapsing:!0,collapsed:!0})}),it("should show after toggled from collapsed",function(){e(),o.isCollapsed=!0,a(o),o.$digest(),expect(i.height()).toBe(0),t({collapsed:!0}),o.collapsed.calls.reset(),o.isCollapsed=!1,o.$digest(),s.flush(),expect(i.height()).not.toBe(0),t({expanding:!0,expanded:!0})}),it("should not trigger any animation on initialization if isCollapsed = false",function(){var e=function(){s.flush()};o.isCollapsed=!1,a(o),o.$digest(),expect(e).toThrowError(/No pending animations ready to be closed or flushed/)}),it("should expand if isCollapsed = false on subsequent use",function(){o.isCollapsed=!1,a(o),o.$digest(),o.isCollapsed=!0,o.$digest(),s.flush(),e(),o.isCollapsed=!1,o.$digest(),s.flush(),expect(i.height()).not.toBe(0),t({expanding:!0,expanded:!0})}),it("should collapse if isCollapsed = true on subsequent uses",function(){o.isCollapsed=!1,a(o),o.$digest(),o.isCollapsed=!0,o.$digest(),s.flush(),o.isCollapsed=!1,o.$digest(),s.flush(),e(),o.isCollapsed=!0,o.$digest(),s.flush(),expect(i.height()).toBe(0),t({collapsing:!0,collapsed:!0})}),it("should change aria-expanded attribute",function(){o.isCollapsed=!1,a(o),o.$digest(),expect(i.attr("aria-expanded")).toBe("true"),o.isCollapsed=!0,o.$digest(),s.flush(),expect(i.attr("aria-expanded")).toBe("false")}),it("should change aria-hidden attribute",function(){o.isCollapsed=!1,a(o),o.$digest(),expect(i.attr("aria-hidden")).toBe("false"),o.isCollapsed=!0,o.$digest(),s.flush(),expect(i.attr("aria-hidden")).toBe("true")}),describe("dynamic content",function(){var e;beforeEach(function(){e=angular.element('<div uib-collapse="isCollapsed"><p>Initial content</p><div ng-show="exp">Additional content</div></div>'),n(e)(o),angular.element(document.body).append(e)}),afterEach(function(){e.remove()}),it("should grow accordingly when content size inside collapse increases",function(){o.exp=!1,o.isCollapsed=!1,o.$digest();var t=e.height();o.exp=!0,o.$digest(),expect(e.height()).toBeGreaterThan(t)}),it("should shrink accordingly when content size inside collapse decreases",function(){o.exp=!0,o.isCollapsed=!1,o.$digest();var t=e.height();o.exp=!1,o.$digest(),expect(e.height()).toBeLessThan(t)})}),describe("expanding callback returning a promise",function(){var e,t;beforeEach(function(){e=l.defer(),o.isCollapsed=!0,o.expanding=function(){return e.promise},a(o),o.$digest(),t=i.height(),o.isCollapsed=!1,o.$digest(),expect(i.attr("aria-expanded")).not.toBe("true"),expect(i.height()).toBe(t)}),it("should wait for it to resolve before animating",function(){e.resolve(),o.$digest(),s.flush(),expect(i.attr("aria-expanded")).toBe("true"),expect(i.height()).toBeGreaterThan(t)}),it("should not animate if it rejects",function(){e.reject(),o.$digest(),expect(i.attr("aria-expanded")).not.toBe("true"),expect(i.height()).toBe(t)})}),describe("collapsing callback returning a promise",function(){var e,t;beforeEach(function(){e=l.defer(),o.isCollapsed=!1,o.collapsing=function(){return e.promise},a(o),o.$digest(),t=i.height(),o.isCollapsed=!0,o.$digest(),expect(i.attr("aria-expanded")).not.toBe("false"),expect(i.height()).toBe(t)}),it("should wait for it to resolve before animating",function(){e.resolve(),o.$digest(),s.flush(),expect(i.attr("aria-expanded")).toBe("false"),expect(i.height()).toBeLessThan(t)}),it("should not animate if it rejects",function(){e.reject(),o.$digest(),expect(i.attr("aria-expanded")).not.toBe("false"),expect(i.height()).toBe(t)})})});