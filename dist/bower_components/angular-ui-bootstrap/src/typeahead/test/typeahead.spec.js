describe("typeahead tests",function(){var e,t,i,a,n,o,l;beforeEach(module("ui.bootstrap.typeahead")),beforeEach(module("ngSanitize")),beforeEach(module("uib/template/typeahead/typeahead-popup.html")),beforeEach(module("uib/template/typeahead/typeahead-match.html")),beforeEach(module(function(e){e.directive("formatter",function(){return{require:"ngModel",link:function(e,t,i,a){a.$formatters.unshift(function(e){return"formatted"+e})}}}),e.directive("childDirective",function(){return{restrict:"A",require:"^parentDirective",link:function(e,t,i,a){}}})})),beforeEach(inject(function(s,d,r,c,p,f,h){e=s,e.source=["foo","bar","baz"],e.states=[{code:"AL",name:"Alaska"},{code:"CL",name:"California"}],t=d,i=r,a=c,n=p,o=f,l=function(t,i){var a=u(t);a.val(i),a.trigger(h.hasEvent("input")?"input":"change"),e.$digest()}}));var s=function(i){var a=t(angular.element(i))(e);return e.$digest(),a},u=function(e){return e.find("input")},d=function(e){return e.find("ul.dropdown-menu")},r=function(e){return d(e).find("li")},c=function(e,t,i){i=i||{};var a=u(e),n=$.Event("keydown");n.which=t,i.shiftKey&&(n.shiftKey=!0),a.trigger(n)};beforeEach(function(){jasmine.addMatchers({toBeClosed:function(e,t){return{compare:function(i,a){var n=d(i),o={pass:e.equals(n.hasClass("ng-hide"),!0,t)};return o.pass?o.message='Expected "'+angular.mock.dump(n)+'" not to be closed.':o.message='Expected "'+angular.mock.dump(n)+'" to be closed.',o}}},toBeOpenWithActive:function(e,t){return{compare:function(i,a,n){var o=d(i),l=r(i),s={pass:e.equals(o.length,1,t)&&e.equals(o.hasClass("ng-hide"),!1,t)&&e.equals(l.length,a,t)&&-1===n?!$(l).hasClass("active"):$(l[n]).hasClass("active")};return s.pass?s.message='Expected "'+i+'" not to be opened.':s.message='Expected "'+i+'" to be opened.',s}}}})}),afterEach(function(){d(i.find("body")).remove()}),describe("initial state and model changes",function(){it("should be closed by default",function(){var e=s('<div><input ng-model="result" uib-typeahead="item for item in source"></div>');expect(e).toBeClosed()}),it('should correctly render initial state if the "as" keyword is used',function(){e.result=e.states[0];var t=s('<div><input ng-model="result" uib-typeahead="state as state.name for state in states"></div>'),i=u(t);expect(i.val()).toEqual("Alaska")}),it("should default to bound model for initial rendering if there is not enough info to render label",function(){e.result=e.states[0].code;var t=s('<div><input ng-model="result" uib-typeahead="state.code as state.name + state.code for state in states"></div>'),i=u(t);expect(i.val()).toEqual("AL")}),it("should not get open on model change",function(){var t=s('<div><input ng-model="result" uib-typeahead="item for item in source"></div>');e.$apply(function(){e.result="foo"}),expect(t).toBeClosed()})}),describe("basic functionality",function(){it("should open and close typeahead based on matches",function(){var e=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue"></div>'),t=u(e),i=t.attr("aria-owns");expect(t.attr("aria-expanded")).toBe("false"),expect(t.attr("aria-activedescendant")).toBeUndefined(),l(e,"ba"),expect(e).toBeOpenWithActive(2,0),expect(d(e).attr("id")).toBe(i),expect(t.attr("aria-expanded")).toBe("true");var a=i+"-option-0";expect(t.attr("aria-activedescendant")).toBe(a),expect(d(e).find("li.active").attr("id")).toBe(a),l(e,""),expect(e).toBeClosed(),expect(t.attr("aria-expanded")).toBe("false"),expect(t.attr("aria-activedescendant")).toBeUndefined()}),it("should allow expressions over multiple lines",function(){var e=s('<div><input ng-model="result" uib-typeahead="item for item in source \n| filter:$viewValue"></div>');l(e,"ba"),expect(e).toBeOpenWithActive(2,0),l(e,""),expect(e).toBeClosed()}),it("should not open typeahead if input value smaller than a defined threshold",function(){var e=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-min-length="2"></div>');l(e,"b"),expect(e).toBeClosed()}),it("should support changing min-length",function(){e.typeAheadMinLength=2;var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-min-length="typeAheadMinLength"></div>');l(t,"b"),expect(t).toBeClosed(),e.typeAheadMinLength=0,e.$digest(),l(t,""),expect(t).toBeOpenWithActive(3,0),e.typeAheadMinLength=2,e.$digest(),l(t,"b"),expect(t).toBeClosed()}),it("should support custom model selecting function",function(){e.updaterFn=function(e){return"prefix"+e};var t=s('<div><input ng-model="result" uib-typeahead="updaterFn(item) as item for item in source | filter:$viewValue"></div>');l(t,"f"),c(t,13),expect(e.result).toEqual("prefixfoo")}),it("should support custom label rendering function",function(){e.formatterFn=function(e){return"prefix"+e};var t=s('<div><input ng-model="result" uib-typeahead="item as formatterFn(item) for item in source | filter:$viewValue"></div>');l(t,"fo");var i=r(t).find("a").html();expect(i).toEqual("prefix<strong>fo</strong>o")}),it("should by default bind view value to model even if not part of matches",function(){var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue"></div>');l(t,"not in matches"),expect(e.result).toEqual("not in matches")}),it("should support the editable property to limit model bindings to matches only",function(){var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-editable="false"></div>');l(t,"not in matches"),expect(e.result).toEqual(void 0)}),it("should set validation errors for non-editable inputs",function(){var t=s('<div><form name="form"><input name="input" ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-editable="false"></form></div>');l(t,"not in matches"),expect(e.result).toEqual(void 0),expect(e.form.input.$error.editable).toBeTruthy(),l(t,"foo"),c(t,13),expect(e.result).toEqual("foo"),expect(e.form.input.$error.editable).toBeFalsy()}),it("should not set editable validation error for empty input",function(){var t=s('<div><form name="form"><input name="input" ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-editable="false"></form></div>');l(t,"not in matches"),expect(e.result).toEqual(void 0),expect(e.form.input.$error.editable).toBeTruthy(),l(t,""),expect(e.result).toEqual(null),expect(e.form.input.$error.editable).toBeFalsy()}),it('should clear view value after blur for typeahead-editable="false"',function(){var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-editable="false"></div>'),i=u(t);l(t,"not in matches"),expect(e.result).toEqual(void 0),expect(i.val()).toEqual("not in matches"),i.blur(),expect(e.result).toEqual(void 0),expect(i.val()).toEqual("")}),it('should clear errors after blur for typeahead-editable="false"',function(){var t=s('<div><form name="form"><input name="input" ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-editable="false"></form></div>'),i=u(t);l(t,"not in matches"),expect(e.result).toEqual(void 0),expect(i.val()).toEqual("not in matches"),i.blur(),expect(e.form.input.$error.editable).toBeFalsy(),expect(e.form.input.$error.parse).toBeFalsy()}),it('should clear view value when no value selected for typeahead-editable="false" typeahead-select-on-blur="false"',function(){var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-editable="false" typeahead-select-on-blur="false"></div>'),i=u(t);l(t,"b"),expect(e.result).toEqual(void 0),expect(i.val()).toEqual("b"),i.blur(),expect(e.result).toEqual(void 0),expect(i.val()).toEqual("")}),it('should not clear view value when there is match but no value selected for typeahead-editable="false" typeahead-select-on-blur="true"',function(){var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-editable="false" typeahead-select-on-blur="true"></div>'),i=u(t);l(t,"b"),expect(e.result).toEqual(void 0),expect(i.val()).toEqual("b"),i.blur(),expect(e.result).toEqual("bar"),expect(i.val()).toEqual("bar")}),it("should support changing the editable property to limit model bindings to matches only",function(){e.isEditable=!0;var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-editable="isEditable"></div>');e.isEditable=!1,e.$digest(),l(t,"not in matches"),expect(e.result).toEqual(void 0)}),it("should support changing the editable property to bind view value to model even if not part of matches",function(){e.isEditable=!1;var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-editable="isEditable"></div>');e.isEditable=!0,e.$digest(),l(t,"not in matches"),expect(e.result).toEqual("not in matches")}),it("should bind loading indicator expression",inject(function(t){e.isLoading=!1,e.loadMatches=function(e){return t(function(){return[]},1e3)};var i=s('<div><input ng-model="result" uib-typeahead="item for item in loadMatches()" typeahead-loading="isLoading"></div>');l(i,"foo"),expect(e.isLoading).toBeTruthy(),t.flush(),expect(e.isLoading).toBeFalsy()})),it("should support timeout before trying to match $viewValue",inject(function(e){var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-wait-ms="200"></div>');l(t,"foo"),expect(t).toBeClosed(),e.flush(),expect(t).toBeOpenWithActive(1,0)})),it("should cancel old timeouts when something is typed within waitTime",inject(function(t){var i=[];e.loadMatches=function(t){return i.push(t),e.source};var a=s('<div><input ng-model="result" uib-typeahead="item for item in loadMatches($viewValue) | filter:$viewValue" typeahead-wait-ms="200"></div>');l(a,"first"),l(a,"second"),t.flush(),expect(i).not.toContain("first")})),it("should allow timeouts when something is typed after waitTime has passed",inject(function(t){var i=[];e.loadMatches=function(t){return i.push(t),e.source};var a=s('<div><input ng-model="result" uib-typeahead="item for item in loadMatches($viewValue) | filter:$viewValue" typeahead-wait-ms="200"></div>');l(a,"first"),t.flush(),expect(i).toContain("first"),l(a,"second"),t.flush(),expect(i).toContain("second")})),it("should support custom popup templates",function(){a.put("custom.html",'<div class="custom">foo</div>');var e=s('<div><input ng-model="result" typeahead-popup-template-url="custom.html" uib-typeahead="state as state.name for state in states | filter:$viewValue"></div>');l(e,"Al"),expect(e.find(".custom").text()).toBe("foo")}),it("should support custom templates for matched items",function(){a.put("custom.html","<p>{{ index }} {{ match.label }}</p>");var e=s('<div><input ng-model="result" typeahead-template-url="custom.html" uib-typeahead="state as state.name for state in states | filter:$viewValue"></div>');l(e,"Al"),expect(r(e).eq(0).find("p").text()).toEqual("0 Alaska")}),it("should support directives which require controllers in custom templates for matched items",function(){a.put("custom.html","<p child-directive>{{ index }} {{ match.label }}</p>");var e=s('<div><input ng-model="result" typeahead-template-url="custom.html" uib-typeahead="state as state.name for state in states | filter:$viewValue"></div>');e.data("$parentDirectiveController",{}),l(e,"Al"),expect(r(e).eq(0).find("p").text()).toEqual("0 Alaska")}),it("should throw error on invalid expression",function(){var e=function(){s('<div><input ng-model="result" uib-typeahead="an invalid expression"></div>')};expect(e).toThrow()})}),describe("selecting a match",function(){it("should select a match on enter",function(){var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue"></div>'),i=u(t);l(t,"b"),c(t,13),expect(e.result).toEqual("bar"),expect(i.val()).toEqual("bar"),expect(t).toBeClosed()}),it("should select a match on tab",function(){var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue"></div>'),i=u(t);l(t,"b"),c(t,9),expect(e.result).toEqual("bar"),expect(i.val()).toEqual("bar"),expect(t).toBeClosed()}),it("should not select any match on blur without 'select-on-blur=true' option",function(){var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue"></div>'),i=u(t);l(t,"b"),i.blur(),expect(e.result).toEqual("b"),expect(i.val()).toEqual("b")}),it("should select a match on blur with 'select-on-blur=true' option",function(){var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-select-on-blur="true"></div>'),i=u(t);l(t,"b"),i.blur(),expect(e.result).toEqual("bar"),expect(i.val()).toEqual("bar")}),it("should select match on click",function(){var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue"></div>'),i=u(t);l(t,"b");var a=$(r(t)[1]).find("a")[0];$(a).click(),e.$digest(),expect(e.result).toEqual("baz"),expect(i.val()).toEqual("baz"),expect(t).toBeClosed()}),it("should invoke select callback on select",function(){e.onSelect=function(t,i,a,n){e.$item=t,e.$model=i,e.$label=a,e.$event=n};var t=s('<div><input ng-model="result" typeahead-on-select="onSelect($item, $model, $label, $event)" uib-typeahead="state.code as state.name for state in states | filter:$viewValue"></div>');l(t,"Alas"),c(t,13),expect(e.result).toEqual("AL"),expect(e.$item).toEqual(e.states[0]),expect(e.$model).toEqual("AL"),expect(e.$label).toEqual("Alaska"),expect(e.$event.type).toEqual("keydown")}),it("should correctly update inputs value on mapping where label is not derived from the model",function(){var t=s('<div><input ng-model="result" uib-typeahead="state.code as state.name for state in states | filter:$viewValue"></div>'),i=u(t);l(t,"Alas"),c(t,13),expect(e.result).toEqual("AL"),expect(i.val()).toEqual("AL")}),it("should bind no results indicator as true when no matches returned",inject(function(t){e.isNoResults=!1,e.loadMatches=function(e){return t(function(){return[]},1e3)};var i=s('<div><input ng-model="result" uib-typeahead="item for item in loadMatches()" typeahead-no-results="isNoResults"></div>');l(i,"foo"),expect(e.isNoResults).toBeFalsy(),t.flush(),expect(e.isNoResults).toBeTruthy()})),it("should bind no results indicator as false when matches are returned",inject(function(t){e.isNoResults=!1,e.loadMatches=function(e){return t(function(){return[e]},1e3)};var i=s('<div><input ng-model="result" uib-typeahead="item for item in loadMatches()" typeahead-no-results="isNoResults"></div>');l(i,"foo"),expect(e.isNoResults).toBeFalsy(),t.flush(),expect(e.isNoResults).toBeFalsy()})),it("should not focus the input if `typeahead-focus-on-select` is false",function(){var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-focus-on-select="false"></div>');i.find("body").append(t);var a=u(t);l(t,"b");var o=$(r(t)[1]).find("a")[0];$(o).click(),e.$digest(),n.flush(),expect(document.activeElement).not.toBe(a[0]),expect(e.result).toEqual("baz")})}),describe("select on exact match",function(){it("should select on an exact match when set",function(){e.onSelect=jasmine.createSpy("onSelect");var t=s('<div><input ng-model="result" typeahead-editable="false" typeahead-on-select="onSelect()" uib-typeahead="item for item in source | filter:$viewValue" typeahead-select-on-exact="true"></div>'),i=u(t);l(t,"bar"),expect(e.result).toEqual("bar"),expect(i.val()).toEqual("bar"),expect(t).toBeClosed(),expect(e.onSelect).toHaveBeenCalled()}),it("should not select on an exact match by default",function(){e.onSelect=jasmine.createSpy("onSelect");var t=s('<div><input ng-model="result" typeahead-editable="false" typeahead-on-select="onSelect()" uib-typeahead="item for item in source | filter:$viewValue"></div>'),i=u(t);l(t,"bar"),expect(e.result).toBeUndefined(),expect(i.val()).toEqual("bar"),expect(e.onSelect.calls.any()).toBe(!1)}),it("should not be case sensitive when select on an exact match",function(){e.onSelect=jasmine.createSpy("onSelect");var t=s('<div><input ng-model="result" typeahead-editable="false" typeahead-on-select="onSelect()" uib-typeahead="item for item in source | filter:$viewValue" typeahead-select-on-exact="true"></div>'),i=u(t);l(t,"BaR"),expect(e.result).toEqual("bar"),expect(i.val()).toEqual("bar"),expect(t).toBeClosed(),expect(e.onSelect).toHaveBeenCalled()}),it("should not auto select when not a match with one potential result left",function(){e.onSelect=jasmine.createSpy("onSelect");var t=s('<div><input ng-model="result" typeahead-editable="false" typeahead-on-select="onSelect()" uib-typeahead="item for item in source | filter:$viewValue" typeahead-select-on-exact="true"></div>'),i=u(t);l(t,"fo"),expect(e.result).toBeUndefined(),expect(i.val()).toEqual("fo"),expect(e.onSelect.calls.any()).toBe(!1)})}),describe("is-open indicator",function(){var t;beforeEach(function(){t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-is-open="isOpen"></div>')}),it("should bind is-open indicator as true when matches are returned",function(){expect(e.isOpen).toBeFalsy(),l(t,"b"),expect(e.isOpen).toBeTruthy()}),it("should bind is-open indicator as false when no matches returned",function(){expect(e.isOpen).toBeFalsy(),l(t,"b"),expect(e.isOpen).toBeTruthy(),l(t,"not match"),expect(e.isOpen).toBeFalsy()}),it("should bind is-open indicator as false when a match is clicked",function(){expect(e.isOpen).toBeFalsy(),l(t,"b"),expect(e.isOpen).toBeTruthy();var i=r(t).find("a").eq(0);i.click(),e.$digest(),expect(e.isOpen).toBeFalsy()}),it("should bind is-open indicator as false when click outside",function(){expect(e.isOpen).toBeFalsy(),l(t,"b"),expect(e.isOpen).toBeTruthy(),i.find("body").click(),e.$digest(),expect(e.isOpen).toBeFalsy()}),it("should bind is-open indicator as false on enter",function(){expect(e.isOpen).toBeFalsy(),l(t,"b"),expect(e.isOpen).toBeTruthy(),c(t,13),expect(e.isOpen).toBeFalsy()}),it("should bind is-open indicator as false on tab",function(){expect(e.isOpen).toBeFalsy(),l(t,"b"),expect(e.isOpen).toBeTruthy(),c(t,9),expect(e.isOpen).toBeFalsy()}),it("should bind is-open indicator as false on escape key",function(){expect(e.isOpen).toBeFalsy(),l(t,"b"),expect(e.isOpen).toBeTruthy(),c(t,27),expect(e.isOpen).toBeFalsy()}),it("should bind is-open indicator as false input value smaller than a defined threshold",function(){var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-is-open="isToggled" typeahead-min-length="2"></div>');expect(e.isToggled).toBeFalsy(),l(t,"b"),expect(e.isToggled).toBeFalsy()})}),describe("pop-up interaction",function(){var e;beforeEach(function(){e=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue"></div>')}),it("should activate prev/next matches on up/down keys",function(){l(e,"b");var t,i=e.find("ul").eq(0)[0];t=0,expect(e).toBeOpenWithActive(2,t),expect(i.scrollTop).toEqual(e.find("li").eq(t)[0].offsetTop),c(e,40),t=1,expect(e).toBeOpenWithActive(2,t),expect(i.scrollTop).toEqual(e.find("li").eq(t)[0].offsetTop),c(e,40),t=0,expect(e).toBeOpenWithActive(2,t),expect(i.scrollTop).toEqual(e.find("li").eq(t)[0].offsetTop),c(e,38),t=1,expect(e).toBeOpenWithActive(2,t),expect(i.scrollTop).toEqual(e.find("li").eq(t)[0].offsetTop),c(e,38),t=0,expect(i.scrollTop).toEqual(e.find("li").eq(t)[0].offsetTop),expect(e).toBeOpenWithActive(2,t)}),it("should close popup on escape key",function(){l(e,"b"),expect(e).toBeOpenWithActive(2,0),c(e,27),expect(e).toBeClosed()}),it("should highlight match on mouseenter",function(){l(e,"b"),expect(e).toBeOpenWithActive(2,0),r(e).eq(1).trigger("mouseenter"),expect(e).toBeOpenWithActive(2,1)})}),describe("promises",function(){var t,i;beforeEach(inject(function(a){i=a.defer(),e.source=function(){return i.promise},t=s('<div><input ng-model="result" uib-typeahead="item for item in source()"></div>')})),it("should display matches from promise",function(){l(t,"c"),expect(t).toBeClosed(),i.resolve(["good","stuff"]),e.$digest(),expect(t).toBeOpenWithActive(2,0)}),it("should not display anything when promise is rejected",function(){l(t,"c"),expect(t).toBeClosed(),i.reject("fail"),e.$digest(),expect(t).toBeClosed()}),it('PR #3178, resolves #2999 - should not return property "length" of undefined for undefined matches',function(){l(t,"c"),expect(t).toBeClosed(),i.resolve(),e.$digest(),expect(t).toBeClosed()})}),describe("non-regressions tests",function(){it("issue 231 - closes matches popup on click outside typeahead",function(){var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue"></div>');l(t,"b"),i.find("body").click(),e.$digest(),expect(t).toBeClosed()}),it("issue 591 - initial formatting for un-selected match and complex label expression",function(){var e=u(s('<div><input ng-model="result" uib-typeahead="state as state.name + \' \' + state.code for state in states | filter:$viewValue"></div>'));expect(e.val()).toEqual("")}),it("issue 786 - name of internal model should not conflict with scope model name",function(){e.state=e.states[0];var t=s('<div><input ng-model="state" uib-typeahead="state as state.name for state in states | filter:$viewValue"></div>'),i=u(t);expect(i.val()).toEqual("Alaska")}),it('issue 863 - it should work correctly with input type="email"',function(){e.emails=["foo@host.com","bar@host.com"];var t=s('<div><input type="email" ng-model="email" uib-typeahead="email for email in emails | filter:$viewValue"></div>'),i=u(t);l(t,"bar"),expect(t).toBeOpenWithActive(1,0),c(t,13),expect(e.email).toEqual("bar@host.com"),expect(i.val()).toEqual("bar@host.com")}),it("issue 964 - should not show popup with matches if an element is not focused",function(){e.items=function(e){return n(function(){return[e]})};var t=s('<div><input ng-model="result" uib-typeahead="item for item in items($viewValue)"></div>'),i=u(t);l(t,"match"),e.$digest(),i.blur(),n.flush(),expect(t).toBeClosed()}),it("should properly update loading callback if an element is not focused",function(){e.items=function(e){return n(function(){return[e]})};var t=s('<div><input ng-model="result" typeahead-loading="isLoading" uib-typeahead="item for item in items($viewValue)"></div>'),i=u(t);l(t,"match"),e.$digest(),i.blur(),n.flush(),expect(e.isLoading).toBeFalsy()}),it("issue 1140 - should properly update loading callback when deleting characters",function(){e.items=function(e){return n(function(){return[e]})};var t=s('<div><input ng-model="result" typeahead-min-length="2" typeahead-loading="isLoading" uib-typeahead="item for item in items($viewValue)"></div>');l(t,"match"),e.$digest(),expect(e.isLoading).toBeTruthy(),l(t,"m"),n.flush(),e.$digest(),expect(e.isLoading).toBeFalsy()}),it("should cancel old timeout when deleting characters",inject(function(t){var i=[];e.loadMatches=function(t){return i.push(t),e.source};var a=s('<div><input ng-model="result" uib-typeahead="item for item in loadMatches($viewValue) | filter:$viewValue" typeahead-min-length="2" typeahead-wait-ms="200"></div>');l(a,"match"),l(a,"m"),t.flush(),expect(i).not.toContain("match")})),describe("",function(){var t;it("does not close matches popup on click in input",function(){t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue"></div>');var a=u(t);i.find("body").append(t),l(t,"b"),a.click(),e.$digest(),expect(t).toBeOpenWithActive(2,0)}),it("issue #1773 - should not trigger an error when used with ng-focus",function(){t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" ng-focus="foo()"></div>');u(t);i.find("body").append(t),l(t,"b");var a=$(r(t)[1]).find("a")[0];$(a).click(),e.$digest()}),afterEach(function(){t.remove()})}),it('issue #1238 - allow names like "query" to be used inside "in" expressions ',function(){e.query=function(){return["foo","bar"]};var t=s('<div><input ng-model="result" uib-typeahead="item for item in query($viewValue)"></div>');l(t,"bar"),expect(t).toBeOpenWithActive(2,0)}),it("issue #3318 - should set model validity to true when set manually",function(){var t=s('<div><form name="form"><input name="input" ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-editable="false"></form></div>');l(t,"not in matches"),e.$apply(function(){e.result="manually set"}),expect(e.result).toEqual("manually set"),expect(e.form.input.$valid).toBeTruthy()}),it("issue #3166 - should set 'parse' key as valid when selecting a perfect match and not editable",function(){var t=s('<div ng-form="test"><input name="typeahead" ng-model="result" uib-typeahead="state as state.name for state in states | filter:$viewValue" typeahead-editable="false"></div>');u(t);l(t,"Alaska"),c(t,13),expect(e.test.typeahead.$error.parse).toBeUndefined()})}),describe("ng-model-options",function(){it("should support getterSetter",function(){function t(e){return e}e.result=t;var i=s('<div><input name="typeahead" ng-model="result" ng-model-options="{getterSetter: true}" uib-typeahead="state as state.name for state in states | filter:$viewValue" typeahead-editable="false"></div>');l(i,"Alaska"),c(i,13),expect(e.result).toBe(t)}),describe("debounce as a number",function(){it("should work with selecting via keyboard",function(){element=s('<div><input name="typeahead" ng-model="result" ng-model-options="{debounce: 400}" uib-typeahead="state as state.name for state in states | filter:$viewvalue"></div>');u(element);l(element,"Alaska"),c(element,13),expect(e.result).not.toBe("Alaska"),n.flush(400),expect(e.result).toBe("Alaska")}),it("should work with select on exact",function(){element=s('<div><input name="typeahead" ng-model="result" ng-model-options="{debounce: 400}" uib-typeahead="state as state.name for state in states | filter:$viewvalue" typeahead-select-on-exact="true"></div>');u(element);l(element,"Alaska"),expect(e.result).not.toBe("Alaska"),n.flush(400),expect(e.result).toBe("Alaska")}),it("should work with selecting a match via click",function(){element=s('<div><input name="typeahead" ng-model="result" ng-model-options="{debounce: 400}" uib-typeahead="state as state.name for state in states | filter:$viewvalue"></div>');u(element);l(element,"Alaska");var t=$(r(element)[0]).find("a")[0];$(t).click(),e.$digest(),expect(e.result).not.toBe("Alaska"),n.flush(400),expect(e.result).toBe("Alaska")})}),describe("debounce as an object",function(){it("should work with selecting via keyboard",function(){element=s('<div><input name="typeahead" ng-model="result" ng-model-options="{debounce: {default: 400, blur: 500}}" uib-typeahead="state as state.name for state in states | filter:$viewvalue"></div>');u(element);l(element,"Alaska"),c(element,13),expect(e.result).not.toBe("Alaska"),n.flush(400),expect(e.result).toBe("Alaska")}),it("should work with select on exact",function(){element=s('<div><input name="typeahead" ng-model="result" ng-model-options="{debounce: {default: 400, blur: 500}}" uib-typeahead="state as state.name for state in states | filter:$viewvalue" typeahead-select-on-exact="true"></div>');u(element);l(element,"Alaska"),expect(e.result).not.toBe("Alaska"),n.flush(400),expect(e.result).toBe("Alaska")}),it("should work with selecting a match via click",function(){element=s('<div><input name="typeahead" ng-model="result" ng-model-options="{debounce: {default: 400, blur: 500}}" uib-typeahead="state as state.name for state in states | filter:$viewvalue"></div>');u(element);l(element,"Alaska");var t=$(r(element)[0]).find("a")[0];$(t).click(),e.$digest(),expect(e.result).not.toBe("Alaska"),n.flush(400),expect(e.result).toBe("Alaska")}),it("should work when blurring and select on blur",function(){element=s('<div><input name="typeahead" ng-model="result" ng-model-options="{debounce: {default: 400, blur: 500}}" uib-typeahead="state as state.name for state in states | filter:$viewvalue" typeahead-select-on-blur="true"></div>');u(element);l(element,"Alaska"),element.blur(),e.$digest(),expect(e.result).not.toBe("Alaska"),n.flush(500),expect(e.result).toBe("Alaska")})})}),describe("input formatting",function(){it("should co-operate with existing formatters",function(){e.result=e.states[0];var t=s('<div><input ng-model="result.name" formatter uib-typeahead="state.name for state in states | filter:$viewValue"></div>'),i=u(t);expect(i.val()).toEqual("formatted"+e.result.name)}),it("should support a custom input formatting function",function(){e.result=e.states[0],e.formatInput=function(e){return e.code};var t=s('<div><input ng-model="result" typeahead-input-formatter="formatInput($model)" uib-typeahead="state as state.name for state in states | filter:$viewValue"></div>'),i=u(t);expect(i.val()).toEqual("AL"),expect(e.result).toEqual(e.states[0])})}),describe("input hint",function(){var t;beforeEach(function(){t=s('<div><input ng-model="result" uib-typeahead="state.name for state in states| filter:$viewValue" typeahead-show-hint="true"></div>')}),it("should show hint when input matches first match",function(){var e=u(t);expect(e.val()).toEqual(""),l(t,"Alas"),expect(e.val()).toEqual("Alaska")}),it("should not show hint when input does not match first match",function(){var e=u(t);expect(e.val()).toEqual(""),l(t,"las"),expect(e.val()).toEqual("")}),it("should reset hint when a match is clicked",function(){var i=u(t);expect(i.val()).toEqual(""),l(t,"Alas"),expect(i.val()).toEqual("Alaska");var a=r(t).find("a").eq(0);a.click(),e.$digest(),expect(i.val()).toEqual("")}),it("should reset hint when click outside",function(){var a=u(t);expect(a.val()).toEqual(""),l(t,"Alas"),expect(a.val()).toEqual("Alaska"),i.find("body").click(),e.$digest(),expect(a.val()).toEqual("")}),it("should reset hint on enter",function(){var e=u(t);expect(e.val()).toEqual(""),l(t,"Alas"),expect(e.val()).toEqual("Alaska"),c(t,13),expect(e.val()).toEqual("")}),it("should reset hint on tab",function(){var e=u(t);expect(e.val()).toEqual(""),l(t,"Alas"),expect(e.val()).toEqual("Alaska"),c(t,9),expect(e.val()).toEqual("")}),it("should reset hint on escape key",function(){var e=u(t);expect(e.val()).toEqual(""),l(t,"Alas"),expect(e.val()).toEqual("Alaska"),c(t,27),expect(e.val()).toEqual("")}),it("should set tab index on hint input element",function(){var e=u(t);expect(e.attr("tabindex")).toEqual("-1")})}),describe("append to",function(){it("append typeahead results to element",function(){i.find("body").append('<div id="myElement"></div>'),e.myElement=i.find("#myElement");var t=s('<div><input name="input" ng-model="result" uib-typeahead="item for item in states | filter:$viewValue" typeahead-append-to="myElement"></div>');l(t,"al"),expect(i.find("#myElement")).toBeOpenWithActive(2,0),i.find("#myElement").remove()})}),describe("append to body",function(){afterEach(function(){angular.element(o).off("resize"),i.find("body").off("scroll")}),it("append typeahead results to body",function(){var e=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-append-to-body="true"></div>');l(e,"ba"),expect(i.find("body")).toBeOpenWithActive(2,0)}),it("should not append to body when value of the attribute is false",function(){var e=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-append-to-body="false"></div>');l(e,"ba"),expect(d(i.find("body")).length).toEqual(0)}),it("should have right position after scroll",function(){var e=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-append-to-body="true"></div>'),t=d(i.find("body")),a=angular.element(document.body);a.css({height:"10000px"}),window.scroll(0,1e3),l(e,"ba"),expect(t.css("top")).toEqual("1000px"),window.scroll(0,500),
a.triggerHandler("scroll"),n.flush(),expect(t.css("top")).toEqual("500px")})}),describe("focus first",function(){it("should focus the first element by default",function(){var e=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue"></div>');l(e,"b"),expect(e).toBeOpenWithActive(2,0),c(e,40),expect(e).toBeOpenWithActive(2,1),c(e,40),expect(e).toBeOpenWithActive(2,0),c(e,38),expect(e).toBeOpenWithActive(2,1),c(e,38),expect(e).toBeOpenWithActive(2,0)}),it("should not focus the first element until keys are pressed",function(){var e=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-focus-first="false"></div>');l(e,"b"),expect(e).toBeOpenWithActive(2,-1),c(e,40),expect(e).toBeOpenWithActive(2,0),c(e,40),expect(e).toBeOpenWithActive(2,1),c(e,40),expect(e).toBeOpenWithActive(2,0),c(e,38),expect(e).toBeOpenWithActive(2,1),c(e,38),expect(e).toBeOpenWithActive(2,0),l(e,"a"),l(e,"b"),expect(e).toBeOpenWithActive(2,-1),c(e,38),expect(e).toBeOpenWithActive(2,1)})}),it("should not capture enter or tab when an item is not focused",function(){e.select_count=0,e.onSelect=function(t,i,a){e.select_count=e.select_count+1};var t=s('<div><input ng-model="result" ng-keydown="keyDownEvent = $event" uib-typeahead="item for item in source | filter:$viewValue" typeahead-on-select="onSelect($item, $model, $label)" typeahead-focus-first="false"></div>');l(t,"b"),c(t,13),expect(e.keyDownEvent.isDefaultPrevented()).toBeFalsy(),expect(e.select_count).toEqual(0),c(t,9),expect(e.keyDownEvent.isDefaultPrevented()).toBeFalsy(),expect(e.select_count).toEqual(0),expect(t).toBeClosed()}),it("should not capture tab when shift key is pressed",function(){e.select_count=0,e.onSelect=function(t,i,a){e.select_count=e.select_count+1};var t=s('<div><input ng-model="result" ng-keydown="keyDownEvent = $event" uib-typeahead="item for item in source | filter:$viewValue" typeahead-on-select="onSelect($item, $model, $label)" typeahead-focus-first="false"></div>');l(t,"b"),c(t,40),c(t,9,{shiftKey:!0}),expect(e.keyDownEvent.isDefaultPrevented()).toBeFalsy(),expect(e.select_count).toEqual(0),expect(t).toBeClosed()}),it("should capture enter or tab when an item is focused",function(){e.select_count=0,e.onSelect=function(t,i,a){e.select_count=e.select_count+1};var t=s('<div><input ng-model="result" ng-keydown="keyDownEvent = $event" uib-typeahead="item for item in source | filter:$viewValue" typeahead-on-select="onSelect($item, $model, $label)" typeahead-focus-first="false"></div>');l(t,"b"),c(t,40),expect(e.keyDownEvent.isDefaultPrevented()).toBeTruthy(),expect(t).toBeOpenWithActive(2,0),c(t,13),expect(e.keyDownEvent.isDefaultPrevented()).toBeTruthy(),expect(e.select_count).toEqual(1)}),describe("minLength set to 0",function(){it("should open typeahead if input is changed to empty string if defined threshold is 0",function(){var e=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-min-length="0"></div>');l(e,""),expect(e).toBeOpenWithActive(3,0)}),it("should open typeahead when input is focused and value is empty if defined threshold is 0",function(){var t=s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-min-length="0"></div>'),i=u(t);i.focus(),n.flush(),e.$digest(),expect(t).toBeOpenWithActive(3,0)})}),describe("event listeners",function(){afterEach(function(){angular.element(o).off("resize"),i.find("body").off("scroll")}),it("should register event listeners when attached to body",function(){spyOn(window,"addEventListener"),spyOn(document.body,"addEventListener");s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-append-to-body="true"></div>');expect(window.addEventListener).toHaveBeenCalledWith("resize",jasmine.any(Function),!1),expect(document.body.addEventListener).toHaveBeenCalledWith("scroll",jasmine.any(Function),!1)}),it("should remove event listeners when attached to body",function(){spyOn(window,"removeEventListener"),spyOn(document.body,"removeEventListener");s('<div><input ng-model="result" uib-typeahead="item for item in source | filter:$viewValue" typeahead-append-to-body="true"></div>');e.$destroy(),expect(window.removeEventListener).toHaveBeenCalledWith("resize",jasmine.any(Function),!1),expect(document.body.removeEventListener).toHaveBeenCalledWith("scroll",jasmine.any(Function),!1)})})}),describe("typeahead tests",function(){it("should allow directives in template to require parent controller",function(){module("ui.bootstrap.typeahead"),module("ngSanitize"),module("uib/template/typeahead/typeahead-popup.html"),module(function(e){e.directive("uibCustomParent",function(){return{controller:function(){this.text="foo"}}}).directive("uibCustomDirective",function(){return{require:"^uibCustomParent",link:function(e,t,i,a){e.text=a.text}}})}),inject(function(e,t,i,a){var n,o=t.$new();a.put("uib/template/typeahead/typeahead-match.html","<div uib-custom-directive>{{text}}</div>"),o.states=[{code:"AL",name:"Alaska"},{code:"CL",name:"California"}],n=e('<div uib-custom-parent><input ng-model="result" uib-typeahead="state.code as state.name + state.code for state in states"></div>')(o),t.$digest();var l=n.find("input");l.val("Al"),l.trigger(i.hasEvent("input")?"input":"change"),o.$digest(),expect(n.find("ul.dropdown-menu li").eq(0).find("[uib-custom-directive]").text()).toEqual("foo")})})});