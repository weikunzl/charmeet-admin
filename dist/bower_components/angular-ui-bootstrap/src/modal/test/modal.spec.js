describe("$uibResolve",function(){beforeEach(module("ui.bootstrap.modal")),it("should resolve invocables and return promise with object of resolutions",function(){module(function(e){e.factory("bar",function(){return"bar"})}),inject(function(e,t,o){o.resolve({foo:"bar",bar:e.resolve("baz"),baz:function(){return"boo"}}).then(function(e){expect(e).toEqual({foo:"bar",bar:"baz",baz:"boo"})}),t.$digest()})}),describe("with custom resolver",function(){beforeEach(module(function(e,t){e.factory("$resolve",function(){return{resolve:jasmine.createSpy()}}),t.setResolver("$resolve")})),it("should call $resolve.resolve",inject(function(e,t){e.resolve({foo:"bar"},{},null,null),expect(t.resolve).toHaveBeenCalledWith({foo:"bar"},{},null,null)}))})}),describe("$uibModal",function(){function e(e,t,o){var n=$.Event("keydown");n.srcElement=e[0],n.which=t,n.shiftKey=o,e.trigger(n)}function t(e,t,o){var n=p.open(e);return o||(d.$digest(),t||a.flush()),n}function o(e,t,o){var n=e.close(t);return d.$digest(),o||(a.flush(),d.$digest(),a.flush(),d.$digest()),n}function n(e,t,o){var n=e.dismiss(t);return d.$digest(),o||(a.flush(),d.$digest(),a.flush(),d.$digest()),n}var a,i,d,l,s,c,r,u,p,m,f;beforeEach(module("ngAnimateMock")),beforeEach(module("ui.bootstrap.modal")),beforeEach(module("uib/template/modal/backdrop.html")),beforeEach(module("uib/template/modal/window.html")),beforeEach(module(function(e,t,o){i=e,f=t,o.directive("parentDirective",function(){return{controller:function(){this.text="foo"}}}).directive("childDirective",function(){return{require:"^parentDirective",link:function(e,t,o,n){e.text=n.text}}}).directive("focusMe",function(){return{link:function(e,t,o){t.focus()}}})})),beforeEach(inject(function(e,t,o,n,i,f,v,h,b){a=e,d=t,l=o,s=n,c=i,r=f,u=v,p=h,m=b})),beforeEach(function(){jasmine.addMatchers({toBeResolvedWith:function(e,t){return{compare:function(e,t){return e.then(function(e){expect(e).toEqual(t),e===t?e.message='Expected "'+angular.mock.dump(e)+'" not to be resolved with "'+t+'".':e.message='Expected "'+angular.mock.dump(e)+'" to be resolved with "'+t+'".'}),d.$digest(),{pass:!0}}}},toBeRejectedWith:function(e,t){return{compare:function(e,t){return e.then(function(){},function(e){expect(e).toEqual(t),e===t?e.message='Expected "'+angular.mock.dump(e)+'" not to be rejected with "'+t+'".':e.message='Expected "'+angular.mock.dump(e)+'" to be rejected with "'+t+'".'}),d.$digest(),{pass:!0}}}},toHaveModalOpenWithContent:function(e,t){return{compare:function(e,t,o){var n,a=e.find("body > div.modal > div.modal-dialog > div.modal-content");n=o?a.find(o):a;var i={pass:"block"===a.css("display")&&n.html()===t};return i.pass?i.message='"Expected "'+angular.mock.dump(a)+'" not to be open with "'+t+'".':i.message='"Expected "'+angular.mock.dump(a)+'" to be open with "'+t+'".',i}}},toHaveModalsOpen:function(e,t){return{compare:function(o,n){var a=o.find("body > div.modal"),i={pass:e.equals(a.length,n,t)};return i.pass?i.message='Expected "'+angular.mock.dump(a)+'" not to have "'+n+'" modals opened.':i.message='Expected "'+angular.mock.dump(a)+'" to have "'+n+'" modals opened.',i}}},toHaveBackdrop:function(e,t){return{compare:function(o,n){var a=o.find("body > div.modal-backdrop"),i={pass:e.equals(a.length,1,t)};return i.pass?i.message='Expected "'+angular.mock.dump(a)+'" not to be a backdrop element".':i.message='Expected "'+angular.mock.dump(a)+'" to be a backdrop element".',i}}}})}),afterEach(function(){var e=l.find("body");e.find("div.modal").remove(),e.find("div.modal-backdrop").remove(),e.removeClass("modal-open"),l.off("keydown")}),describe("basic scenarios with default options",function(){it("should open and dismiss a modal with a minimal set of options",function(){var e=t({template:"<div>Content</div>"});expect(l).toHaveModalsOpen(1),expect(l).toHaveModalOpenWithContent("Content","div"),expect(l).toHaveBackdrop(),n(e,"closing in test"),expect(l).toHaveModalsOpen(0),expect(l).not.toHaveBackdrop()}),it("should compile modal before inserting into DOM",function(){var e,t={result:u.defer(),opened:u.defer(),closed:u.defer(),rendered:u.defer(),close:function(e){return m.close(t,e)},dismiss:function(e){return m.dismiss(t,e)}},n="test";m.open(t,{appendTo:angular.element(document.body),scope:d.$new(),deferred:t.result,renderDeferred:t.rendered,closedDeferred:t.closed,content:'<div id="test">{{\''+n+"'}}</div>"}),e=m.getTop(),expect(e.value.modalDomEl.find("#test").length).toEqual(0),expect(angular.element("#test").length).toEqual(0),d.$digest(),expect(e.value.modalDomEl.find("#test").text()).toEqual(n),expect(angular.element("#test").text()).toEqual(n),a.flush(),o(t,"closing in test",!0)}),it("should resolve rendered promise when animation is complete",function(){var e={result:u.defer(),opened:u.defer(),closed:u.defer(),rendered:u.defer(),close:function(t){return m.close(e,t)},dismiss:function(t){return m.dismiss(e,t)}},t=!1;e.rendered.promise.then(function(){t=!0}),m.open(e,{appendTo:angular.element(document.body),scope:d.$new(),deferred:e.result,renderDeferred:e.rendered,closedDeferred:e.closed,content:'<div id="test">test</div>'}),d.$digest(),expect(t).toBe(!1),a.flush(),expect(t).toBe(!0)}),it("should not throw an exception on a second dismiss",function(){var e=t({template:"<div>Content</div>"});expect(l).toHaveModalsOpen(1),expect(l).toHaveModalOpenWithContent("Content","div"),expect(l).toHaveBackdrop(),n(e,"closing in test"),expect(l).toHaveModalsOpen(0),n(e,"closing in test",!0)}),it("should not throw an exception on a second close",function(){var e=t({template:"<div>Content</div>"});expect(l).toHaveModalsOpen(1),expect(l).toHaveModalOpenWithContent("Content","div"),expect(l).toHaveBackdrop(),o(e,"closing in test"),expect(l).toHaveModalsOpen(0),o(e,"closing in test",!0)}),it("should open a modal from templateUrl",function(){c.put("content.html","<div>URL Content</div>");var e=t({templateUrl:"content.html"});expect(l).toHaveModalsOpen(1),expect(l).toHaveModalOpenWithContent("URL Content","div"),expect(l).toHaveBackdrop(),n(e,"closing in test"),expect(l).toHaveModalsOpen(0),expect(l).not.toHaveBackdrop()}),it("should support closing on ESC",function(){t({template:"<div>Content</div>"});expect(l).toHaveModalsOpen(1),e(l,27),a.flush(),d.$digest(),a.flush(),d.$digest(),expect(l).toHaveModalsOpen(0)}),it("should not close on ESC if event.preventDefault() was issued",function(){function o(e){e.preventDefault()}t({template:"<div><button>x</button></div>"});expect(l).toHaveModalsOpen(1);var n=angular.element("button").on("keydown",o);e(n,27),d.$digest(),expect(l).toHaveModalsOpen(1),n.off("keydown",o),e(n,27),a.flush(),d.$digest(),a.flush(),d.$digest(),expect(l).toHaveModalsOpen(0)}),it("should support closing on backdrop click",function(){t({template:"<div>Content</div>"});expect(l).toHaveModalsOpen(1),l.find("body > div.modal").click(),a.flush(),d.$digest(),a.flush(),d.$digest(),expect(l).toHaveModalsOpen(0)}),it("should return to the element which had focus before the dialog was invoked",function(){var o="<a href>Link</a>",n=angular.element(o);angular.element(document.body).append(n),n.focus(),expect(document.activeElement.tagName).toBe("A");t({template:"<div>Content<button>inside modal</button></div>"});d.$digest(),expect(document.activeElement.tagName).toBe("DIV"),expect(l).toHaveModalsOpen(1),e(l,27),a.flush(),d.$digest(),a.flush(),d.$digest(),expect(document.activeElement.tagName).toBe("A"),expect(l).toHaveModalsOpen(0),n.remove()}),it("should return to document.body if element which had focus before the dialog was invoked is gone, or is missing focus function",function(){var o="<a href>Link</a>",n=angular.element(o);angular.element(document.body).append(n),n.focus(),expect(document.activeElement.tagName).toBe("A");t({template:"<div>Content</div>"});d.$digest(),expect(document.activeElement.tagName).toBe("DIV"),expect(l).toHaveModalsOpen(1),n[0].focus=void 0,e(l,27),a.flush(),d.$digest(),a.flush(),d.$digest(),expect(document.activeElement.tagName).toBe("BODY"),expect(l).toHaveModalsOpen(0),n.remove()}),it("should resolve returned promise on close",function(){var e=t({template:"<div>Content</div>"});o(e,"closed ok"),expect(e.result).toBeResolvedWith("closed ok")}),it("should reject returned promise on dismiss",function(){var e=t({template:"<div>Content</div>"});n(e,"esc"),expect(e.result).toBeRejectedWith("esc")}),it("should reject returned promise on unexpected closure",function(){var e=d.$new(),o=t({template:"<div>Content</div>",scope:e});e.$destroy(),expect(o.result).toBeRejectedWith("$uibUnscheduledDestruction"),a.flush(),d.$digest(),a.flush(),d.$digest(),expect(l).toHaveModalsOpen(0)}),it("should resolve the closed promise when modal is closed",function(){var e=t({template:"<div>Content</div>"}),n=!1;o(e,"closed ok"),e.closed.then(function(){n=!0}),d.$digest(),expect(n).toBe(!0)}),it("should resolve the closed promise when modal is dismissed",function(){var e=t({template:"<div>Content</div>"}),o=!1;n(e,"esc"),e.closed.then(function(){o=!0}),d.$digest(),expect(o).toBe(!0)}),it("should expose a promise linked to the templateUrl / resolve promises",function(){var e=t({template:"<div>Content</div>",resolve:{ok:function(){return u.when("ok")}}});expect(e.opened).toBeResolvedWith(!0)}),it("should expose a promise linked to the templateUrl / resolve promises and reject it if needed",function(){var e=t({template:"<div>Content</div>",resolve:{ok:function(){return u.reject("ko")}}},!0);expect(e.opened).toBeRejectedWith("ko")}),it("should focus on the element that has autofocus attribute when the modal is open/reopen and the animations have finished",function(){function e(){var e=t({template:'<div><input type="text" id="auto-focus-element" autofocus></div>'});d.$digest(),expect(angular.element("#auto-focus-element")).toHaveFocus(),o(e,"closed ok"),expect(e.result).toBeResolvedWith("closed ok")}e(),e()}),it("should not focus on the element that has autofocus attribute when the modal is opened and something in the modal already has focus and the animations have finished",function(){function e(){var e=t({template:'<div><input type="text" id="auto-focus-element" autofocus><input type="text" id="pre-focus-element" focus-me></div>'});d.$digest(),expect(angular.element("#auto-focus-element")).not.toHaveFocus(),expect(angular.element("#pre-focus-element")).toHaveFocus(),o(e,"closed ok"),expect(e.result).toBeResolvedWith("closed ok")}e(),e()}),it("should wait until the in animation is finished before attempting to focus the modal or autofocus element",function(){function e(){var e=t({template:'<div><input type="text" id="auto-focus-element" autofocus></div>'},!0,!0);expect(angular.element("#auto-focus-element")).not.toHaveFocus(),d.$digest(),a.flush(),expect(angular.element("#auto-focus-element")).toHaveFocus(),o(e,"closed ok"),expect(e.result).toBeResolvedWith("closed ok")}function n(){var e="<a href>Link</a>",n=angular.element(e);angular.element(document.body).append(n),n.focus(),expect(document.activeElement.tagName).toBe("A");var i=t({template:'<div><input type="text"></div>'},!0,!0);expect(document.activeElement.tagName).toBe("A"),d.$digest(),a.flush(),expect(document.activeElement.tagName).toBe("DIV"),o(i,"closed ok"),expect(i.result).toBeResolvedWith("closed ok"),n.remove()}e(),n()}),it("should change focus to first element when tab key was pressed",function(){var o=angular.element('<a href="#" id="cannot-get-focus-from-modal">Outland link</a>');angular.element(document.body).append(o),o.focus(),t({template:'<a href="#" id="tab-focus-link"><input type="text" id="tab-focus-input1"/><input type="text" id="tab-focus-input2"/><button id="tab-focus-button">Open me!</button>'}),expect(l).toHaveModalsOpen(1);var n=angular.element(document.getElementById("tab-focus-button"));n.focus(),e(n,9),expect(document.activeElement.getAttribute("id")).toBe("tab-focus-link"),o.remove()}),it("should change focus to last element when shift+tab key is pressed",function(){var o=angular.element('<a href="#" id="cannot-get-focus-from-modal">Outland link</a>');angular.element(document.body).append(o),o.focus(),t({template:'<a href="#" id="tab-focus-link"><input type="text" id="tab-focus-input1"/><input type="text" id="tab-focus-input2"/><button id="tab-focus-button">Open me!</button>'}),d.$digest(),expect(l).toHaveModalsOpen(1),e(angular.element(document.activeElement),9,!0),expect(document.activeElement.getAttribute("id")).toBe("tab-focus-button");var n=angular.element(document.getElementById("tab-focus-link"));n.focus(),e(angular.element(document.activeElement),9,!0),expect(document.activeElement.getAttribute("id")).toBe("tab-focus-button"),o.remove()}),it("should change focus to first element when tab key is pressed when keyboard is false",function(){var o=angular.element('<a href="#" id="cannot-get-focus-from-modal">Outland link</a>');angular.element(document.body).append(o),o.focus(),t({template:'<a href="#" id="tab-focus-link"><input type="text" id="tab-focus-input1"/><input type="text" id="tab-focus-input2"/><button id="tab-focus-button">Open me!</button>',keyboard:!1}),expect(l).toHaveModalsOpen(1);var n=angular.element(document.getElementById("tab-focus-button"));n.focus(),e(n,9),expect(document.activeElement.getAttribute("id")).toBe("tab-focus-link"),o.remove()}),it("should change focus to last element when shift+tab keys are pressed when keyboard is false",function(){var o=angular.element('<a href="#" id="cannot-get-focus-from-modal">Outland link</a>');angular.element(document.body).append(o),o.focus(),t({template:'<a href="#" id="tab-focus-link"><input type="text" id="tab-focus-input1"/><input type="text" id="tab-focus-input2"/><button id="tab-focus-button">Open me!</button>',keyboard:!1}),d.$digest(),expect(l).toHaveModalsOpen(1),e(angular.element(document.activeElement),9,!0),expect(document.activeElement.getAttribute("id")).toBe("tab-focus-button");var n=angular.element(document.getElementById("tab-focus-link"));n.focus(),e(angular.element(document.activeElement),9,!0),expect(document.activeElement.getAttribute("id")).toBe("tab-focus-button"),o.remove()}),it("should change focus to next proper element when DOM changes and tab is pressed",function(){var o=angular.element('<a href="#" id="cannot-get-focus-from-modal">Outland link</a>');angular.element(document.body).append(o),o.focus(),t({template:'<a href="#" id="tab-focus-link1">a</a><a href="#" id="tab-focus-link2">b</a><a href="#" id="tab-focus-link3">c</a><button id="tab-focus-button">Open me!</button>',keyboard:!1}),d.$digest(),expect(l).toHaveModalsOpen(1),$("#tab-focus-link3").focus(),expect(document.activeElement.getAttribute("id")).toBe("tab-focus-link3"),$("#tab-focus-button").remove(),e(angular.element(document.activeElement),9,!1),expect(document.activeElement.getAttribute("id")).toBe("tab-focus-link1"),o.remove()}),it("should change focus to next proper element when DOM changes and shift+tab is pressed",function(){var o=angular.element('<a href="#" id="cannot-get-focus-from-modal">Outland link</a>');angular.element(document.body).append(o),o.focus(),t({template:'<a href="#" id="tab-focus-link1">a</a><a href="#" id="tab-focus-link2">b</a><a href="#" id="tab-focus-link3">c</a><button id="tab-focus-button">Open me!</button>',keyboard:!1}),d.$digest(),expect(l).toHaveModalsOpen(1),$("#tab-focus-link1").focus(),expect(document.activeElement.getAttribute("id")).toBe("tab-focus-link1"),$("#tab-focus-button").remove(),e(angular.element(document.activeElement),9,!0),expect(document.activeElement.getAttribute("id")).toBe("tab-focus-link3"),o.remove()}),it("should change focus to next non-hidden element when tab is pressed",function(){var o=angular.element('<a href="#" id="cannot-get-focus-from-modal">Outland link</a>');angular.element(document.body).append(o),o.focus(),t({template:'<a href="#" id="tab-focus-link1">a</a><a href="#" id="tab-focus-link2">b</a><a href="#" id="tab-focus-link3">c</a><button id="tab-focus-button">Open me!</button>',keyboard:!1}),d.$digest(),expect(l).toHaveModalsOpen(1),$("#tab-focus-link3").focus(),expect(document.activeElement.getAttribute("id")).toBe("tab-focus-link3"),$("#tab-focus-button").css("display","none"),e(angular.element(document.activeElement),9,!1),expect(document.activeElement.getAttribute("id")).toBe("tab-focus-link1"),o.remove()}),it("should change focus to previous non-hidden element when shift+tab is pressed",function(){var o=angular.element('<a href="#" id="cannot-get-focus-from-modal">Outland link</a>');angular.element(document.body).append(o),o.focus(),t({template:'<a href="#" id="tab-focus-link1">a</a><a href="#" id="tab-focus-link2">b</a><a href="#" id="tab-focus-link3">c</a><button id="tab-focus-button">Open me!</button>',keyboard:!1}),d.$digest(),expect(l).toHaveModalsOpen(1),$("#tab-focus-link1").focus(),expect(document.activeElement.getAttribute("id")).toBe("tab-focus-link1"),$("#tab-focus-button").css("display","none"),e(angular.element(document.activeElement),9,!0),expect(document.activeElement.getAttribute("id")).toBe("tab-focus-link3"),o.remove()})}),describe("default options can be changed in a provider",function(){it("should allow overriding default options in a provider",function(){f.options.backdrop=!1;t({template:"<div>Content</div>"});expect(l).toHaveModalOpenWithContent("Content","div"),expect(l).not.toHaveBackdrop()}),it("should accept new objects with default options in a provider",function(){f.options={backdrop:!1};t({template:"<div>Content</div>"});expect(l).toHaveModalOpenWithContent("Content","div"),expect(l).not.toHaveBackdrop()})}),describe("option by option",function(){describe("template and templateUrl",function(){it("should throw an error if none of template and templateUrl are provided",function(){expect(function(){t({})}).toThrow(new Error("One of template or templateUrl options is required."))}),it("should not fail if a templateUrl contains leading / trailing white spaces",function(){c.put("whitespace.html","  <div>Whitespaces</div>  "),t({templateUrl:"whitespace.html"}),expect(l).toHaveModalOpenWithContent("Whitespaces","div")}),it("should accept template as a function",function(){t({template:function(){return"<div>From a function</div>"}}),expect(l).toHaveModalOpenWithContent("From a function","div")}),it("should not fail if a templateUrl as a function",function(){c.put("whitespace.html","  <div>Whitespaces</div>  "),t({templateUrl:function(){return"whitespace.html"}}),expect(l).toHaveModalOpenWithContent("Whitespaces","div")})}),describe("controller",function(){it("should accept controllers and inject modal instances",function(){var e=function(e,t){e.fromCtrl="Content from ctrl",e.isModalInstance=angular.isObject(t)&&angular.isFunction(t.close)};t({template:"<div>{{fromCtrl}} {{isModalInstance}}</div>",controller:e}),expect(l).toHaveModalOpenWithContent("Content from ctrl true","div")}),it("should accept controllerAs alias",function(){i.register("TestCtrl",function(e){this.fromCtrl="Content from ctrl",this.isModalInstance=angular.isObject(e)&&angular.isFunction(e.close)}),t({template:"<div>{{test.fromCtrl}} {{test.isModalInstance}}</div>",controller:"TestCtrl as test"}),expect(l).toHaveModalOpenWithContent("Content from ctrl true","div")}),it("should respect the controllerAs property as an alternative for the controller-as syntax",function(){i.register("TestCtrl",function(e){this.fromCtrl="Content from ctrl",this.isModalInstance=angular.isObject(e)&&angular.isFunction(e.close)}),t({template:"<div>{{test.fromCtrl}} {{test.isModalInstance}}</div>",controller:"TestCtrl",controllerAs:"test"}),expect(l).toHaveModalOpenWithContent("Content from ctrl true","div")}),it("should allow defining in-place controller-as controllers",function(){t({template:"<div>{{test.fromCtrl}} {{test.isModalInstance}}</div>",controller:function(e){this.fromCtrl="Content from ctrl",this.isModalInstance=angular.isObject(e)&&angular.isFunction(e.close)},controllerAs:"test"}),expect(l).toHaveModalOpenWithContent("Content from ctrl true","div")}),it("should allow usage of bindToController",function(){var e=d.$new(!0);e.foo="bar",t({template:"<div>{{test.fromCtrl}} {{test.closeDismissPresent()}} {{test.foo}}</div>",controller:function(t){expect(this.foo).toEqual(e.foo),this.fromCtrl="Content from ctrl",this.closeDismissPresent=function(){return angular.isFunction(this.$close)&&angular.isFunction(this.$dismiss)}},controllerAs:"test",bindToController:!0,scope:e}),expect(l).toHaveModalOpenWithContent("Content from ctrl true bar","div")}),it("should have $onInit called",function(){var e=d.$new(!0),o=jasmine.createSpy("$onInit");e.foo="bar",t({template:"<div>{{test.fromCtrl}} {{test.closeDismissPresent()}} {{test.foo}}</div>",controller:function(e){this.$onInit=o,this.fromCtrl="Content from ctrl",this.closeDismissPresent=function(){return angular.isFunction(this.$close)&&angular.isFunction(this.$dismiss)}},controllerAs:"test",bindToController:!0,scope:e}),expect(l).toHaveModalOpenWithContent("Content from ctrl true bar","div"),expect(o).toHaveBeenCalled()})}),describe("resolve",function(){function e(e,t){return{template:e,controller:o,resolve:t}}var o=function(e,t){e.value=t};it("should resolve simple values",function(){t(e("<div>{{value}}</div>",{value:function(){return"Content from resolve"}})),expect(l).toHaveModalOpenWithContent("Content from resolve","div")}),it("should resolve string references to injectables",function(){t({controller:function(e,t){e.value="Content from resolve",expect(t).toBe(p)},resolve:{$foo:"$uibModal"},template:"<div>{{value}}</div>"}),expect(l).toHaveModalOpenWithContent("Content from resolve","div")}),it("should resolve promises as promises",function(){t({controller:function(e,t){e.value="Content from resolve",expect(t).toBe("bar")},resolve:{$foo:u.when("bar")},template:"<div>{{value}}</div>"})}),it("should delay showing modal if one of the resolves is a promise",function(){t(e("<div>{{value}}</div>",{value:function(){return r(function(){return"Promise"},100)}}),!0),expect(l).toHaveModalsOpen(0),r.flush(),expect(l).toHaveModalOpenWithContent("Promise","div")}),it("should not open dialog (and reject returned promise) if one of resolve fails",function(){var o=u.defer(),n=t(e("<div>{{value}}</div>",{value:function(){return o.promise}}),!0);expect(l).toHaveModalsOpen(0),o.reject("error in test"),d.$digest(),expect(l).toHaveModalsOpen(0),expect(n.result).toBeRejectedWith("error in test")}),it("should support injection with minification-safe syntax in resolve functions",function(){t(e("<div>{{value.id}}</div>",{value:["$locale",function(e){return e}]})),expect(l).toHaveModalOpenWithContent("en-us","div")})}),describe("scope",function(){it("should use custom scope if provided",function(){var e=d.$new();e.fromScope="Content from custom scope",t({template:"<div>{{fromScope}}</div>",scope:e}),expect(l).toHaveModalOpenWithContent("Content from custom scope","div")}),it("should create and use child of $rootScope if custom scope not provided",function(){d.$$childTail;d.fromScope="Content from root scope",t({template:"<div>{{fromScope}}</div>"}),expect(l).toHaveModalOpenWithContent("Content from root scope","div")})}),describe("keyboard",function(){it("should not close modals if keyboard option is set to false",function(){t({template:"<div>No keyboard</div>",keyboard:!1}),expect(l).toHaveModalsOpen(1),e(l,27),d.$digest(),expect(l).toHaveModalsOpen(1)})}),describe("backdrop",function(){it("should not have any backdrop element if backdrop set to false",function(){var e=t({template:"<div>No backdrop</div>",backdrop:!1});expect(l).toHaveModalOpenWithContent("No backdrop","div"),expect(l).not.toHaveBackdrop(),n(e),expect(l).toHaveModalsOpen(0)}),it('should not close modal on backdrop click if backdrop is specified as "static"',function(){t({template:"<div>Static backdrop</div>",backdrop:"static"}),l.find("body > div.modal-backdrop").click(),d.$digest(),expect(l).toHaveModalOpenWithContent("Static backdrop","div"),expect(l).toHaveBackdrop()}),it("should contain backdrop in classes on each modal opening",function(){var e=t({template:"<div>With backdrop</div>"}),o=l.find("body > div.modal-backdrop");expect(o).toHaveClass("in"),n(e),e=t({template:"<div>With backdrop</div>"}),o=l.find("body > div.modal-backdrop"),expect(o).toHaveClass("in")}),describe("custom backdrop classes",function(){it("should support additional backdrop class as string",function(){t({template:"<div>With custom backdrop class</div>",backdropClass:"additional"}),expect(l.find("div.modal-backdrop")).toHaveClass("additional")})})}),describe("custom window classes",function(){it("should support additional window class as string",function(){t({template:"<div>With custom window class</div>",windowClass:"additional"}),expect(l.find("div.modal")).toHaveClass("additional")})}),describe("top window class",function(){it("should support top class option",function(){t({template:"<div>With custom window top class</div>",windowTopClass:"top-class"}),expect(l.find("div.modal")).toHaveClass("top-class")})}),describe("size",function(){it("should support creating small modal dialogs",function(){t({template:"<div>Small modal dialog</div>",size:"sm"}),expect(l.find("div.modal-dialog")).toHaveClass("modal-sm")}),it("should support creating large modal dialogs",function(){t({template:"<div>Large modal dialog</div>",size:"lg"}),expect(l.find("div.modal-dialog")).toHaveClass("modal-lg")}),it("should support custom size modal dialogs",function(){t({template:"<div>Large modal dialog</div>",size:"custom"}),expect(l.find("div.modal-dialog")).toHaveClass("modal-custom")})}),describe("animation",function(){it("should have animation fade classes by default",function(){t({template:"<div>Small modal dialog</div>"}),expect(l.find(".modal")).toHaveClass("fade"),expect(l.find(".modal-backdrop")).toHaveClass("fade")}),it("should not have fade classes if animation false",function(){t({template:"<div>Small modal dialog</div>",animation:!1}),expect(l.find(".modal")).not.toHaveClass("fade"),expect(l.find(".modal-backdrop")).not.toHaveClass("fade")})}),describe("appendTo",function(){it("should be added to body by default",function(){t({template:"<div>Content</div>"});expect(l).toHaveModalsOpen(1),expect(l).toHaveModalOpenWithContent("Content","div")}),it("should not be added to body if appendTo is passed",function(){var e=angular.element("<section>Some content</section>");angular.element(document.body).append(e);t({template:"<div>Content</div>",appendTo:e});expect(l).not.toHaveModalOpenWithContent("Content","div"),e.remove()}),it("should be added to appendTo element if appendTo is passed",function(){var e=angular.element("<section>Some content</section>");angular.element(document.body).append(e),expect(l.find("section").children("div.modal").length).toBe(0),t({template:"<div>Content</div>",appendTo:e}),expect(l.find("section").children("div.modal").length).toBe(1),e.remove()}),it("should throw error if appendTo element is not found",function(){expect(function(){t({template:"<div>Content</div>",appendTo:l.find("aside")})}).toThrow(new Error("appendTo element not found. Make sure that the element passed is in DOM."))}),it("should be removed from appendTo element when dismissed",function(){var e=t({template:"<div>Content</div>"});expect(l).toHaveModalsOpen(1),n(e),expect(l).toHaveModalsOpen(0)}),it("should allow requiring parent directive from appendTo target",function(){var e=s("<section parent-directive>Some content</section>")(d);angular.element(document.body).append(e),t({template:"<div child-directive>{{text}}</div>",appendTo:e}),expect(l.find("[child-directive]").text()).toBe("foo"),e.remove()})}),describe("openedClass",function(){var e;beforeEach(function(){e=l.find("body")}),it("should add the modal-open class to the body element by default",function(){t({template:"<div>dummy modal</div>"}),expect(e).toHaveClass("modal-open")}),it("should add the custom class to the body element",function(){t({template:"<div>dummy modal</div>",openedClass:"foo"}),expect(e).toHaveClass("foo"),expect(e).not.toHaveClass("modal-open")}),it("should remove the custom class on closing of modal",function(){var n=t({template:"<div>dummy modal</div>",openedClass:"foo"});expect(e).toHaveClass("foo"),o(n),expect(e).not.toHaveClass("foo")}),it("should add multiple custom classes to the body element and remove appropriately",function(){var n=t({template:"<div>dummy modal</div>",openedClass:"foo"});expect(e).toHaveClass("foo"),expect(e).not.toHaveClass("modal-open");var a=t({template:"<div>dummy modal</div>",openedClass:"bar"});expect(e).toHaveClass("foo"),expect(e).toHaveClass("bar"),expect(e).not.toHaveClass("modal-open");var i=t({template:"<div>dummy modal</div>",openedClass:"foo"});expect(e).toHaveClass("foo"),expect(e).toHaveClass("bar"),expect(e).not.toHaveClass("modal-open"),o(n),expect(e).toHaveClass("foo"),expect(e).toHaveClass("bar"),expect(e).not.toHaveClass("modal-open"),o(a),expect(e).toHaveClass("foo"),expect(e).not.toHaveClass("bar"),expect(e).not.toHaveClass("modal-open"),o(i),expect(e).not.toHaveClass("foo"),expect(e).not.toHaveClass("bar"),expect(e).not.toHaveClass("modal-open")}),it("should not add the modal-open class if modal is closed before animation",function(){var n=t({template:"<div>dummy modal</div>"},!0);o(n),expect(e).not.toHaveClass("modal-open")})})}),describe("modal window",function(){it("should not use transclusion scope for modals content - issue 2110",function(){d.animate=!1,s('<div uib-modal-window animate="animate"><span ng-init="foo=true"></span></div>')(d),d.$digest(),expect(d.foo).toBeTruthy()}),it("should support custom CSS classes as string",function(){d.animate=!1;var e=s('<div uib-modal-window animate="animate" window-class="test foo">content</div>')(d);d.$digest(),expect(e).toHaveClass("test"),expect(e).toHaveClass("foo")}),it("should support window top class",function(){d.animate=!1;var e=s('<div uib-modal-window animate="animate" window-top-class="test foo">content</div>')(d);d.$digest(),expect(e).toHaveClass("test"),expect(e).toHaveClass("foo")}),it("should support custom template url",inject(function(e){e.put("window.html",'<div class="mywindow" ng-transclude></div>');var t=s('<div uib-modal-window template-url="window.html" window-class="test">content</div>')(d);d.$digest(),expect(t).toHaveClass("mywindow"),expect(t).toHaveClass("test")}))}),describe("multiple modals",function(){it("should allow opening of multiple modals",function(){var e=t({template:"<div>Modal1</div>"}),o=t({template:"<div>Modal2</div>"});expect(l).toHaveModalsOpen(2),n(o),expect(l).toHaveModalsOpen(1),expect(l).toHaveModalOpenWithContent("Modal1","div"),n(e),expect(l).toHaveModalsOpen(0)}),it("should be able to dismiss all modals at once",function(){t({template:"<div>Modal1</div>"}),t({template:"<div>Modal2</div>"});expect(l).toHaveModalsOpen(2),m.dismissAll(),a.flush(),a.flush(),expect(l).toHaveModalsOpen(0)}),it("should not close any modals on ESC if the topmost one does not allow it",function(){t({template:"<div>Modal1</div>"}),t({template:"<div>Modal2</div>",keyboard:!1});e(l,27),d.$digest(),expect(l).toHaveModalsOpen(2)}),it("should not close any modals on click if a topmost modal does not have backdrop",function(){t({template:"<div>Modal1</div>"}),t({template:"<div>Modal2</div>",backdrop:!1});l.find("body > div.modal-backdrop").click(),d.$digest(),expect(l).toHaveModalsOpen(2)}),it("should not interfere with default options",function(){t({template:"<div>Modal1</div>",backdrop:!1}),t({template:"<div>Modal2</div>"});d.$digest(),expect(l).toHaveBackdrop()}),it('should add "modal-open" class when a modal gets opened',function(){var e=l.find("body");expect(e).not.toHaveClass("modal-open");var o=t({template:"<div>Content1</div>"});expect(e).toHaveClass("modal-open");var a=t({template:"<div>Content1</div>"});expect(e).toHaveClass("modal-open"),n(o),expect(e).toHaveClass("modal-open"),n(a),expect(e).not.toHaveClass("modal-open")}),it("should return to the element which had focus before the dialog is invoked",function(){
var e="<a href>Link</a>",o=angular.element(e);angular.element(document.body).append(o),o.focus(),expect(document.activeElement.tagName).toBe("A");var a=t({template:'<div>Modal1<button id="focus">inside modal1</button></div>'});d.$digest(),document.getElementById("focus").focus(),expect(document.activeElement.tagName).toBe("BUTTON"),expect(l).toHaveModalsOpen(1);var i=t({template:"<div>Modal2</div>"});d.$digest(),expect(document.activeElement.tagName).toBe("DIV"),expect(l).toHaveModalsOpen(2),n(i),expect(document.activeElement.tagName).toBe("BUTTON"),expect(l).toHaveModalsOpen(1),n(a),expect(document.activeElement.tagName).toBe("A"),expect(l).toHaveModalsOpen(0),o.remove()}),it("should open modals and resolve the opened promises in order",function(){function e(e){var o=[],n="",a="";angular.forEach(e,function(e,i){var l=void 0!==e.reject;l?e=e.reject:n+=i,o[e]={index:i,deferred:u.defer(),reject:l};var s=d.$new();s.index=i,t({template:"<div>"+i+"</div>",scope:s,resolve:{x:function(){return o[e].deferred.promise}}},!0).opened.then(function(){expect(m.getTop().value.modalScope.index).toEqual(i),a+=i})}),angular.forEach(o,function(e,t){e.reject?e.deferred.reject("rejected:"+e.index):e.deferred.resolve("resolved:"+e.index),d.$digest()}),expect(a).toEqual(n),expect(p.getPromiseChain()).toEqual(null)}function o(e,t){function o(a){e:for(var i=0;e>i;i++){for(var d=0;a>d;d++)if(n[d]===i)continue e;n[a]=i,a+1===e?t(angular.copy(n)):o(a+1)}}if(!(1>e||"function"!=typeof t)){var n=[];o(0)}}o(2,function(t){e(t)}),o(2,function(t){e(t.map(function(e,t){return{reject:e}}))}),o(2,function(t){e(t.map(function(e,t){return 0===t?{reject:e}:e}))}),o(3,function(t){e(t)}),o(3,function(t){e(t.map(function(e,t){return{reject:e}}))}),o(3,function(t){e(t.map(function(e,t){return 0===t?{reject:e}:e}))}),o(3,function(t){e(t.map(function(e,t){return 1===t?{reject:e}:e}))}),a.flush()}),it("should have top class only on top window",function(){t({template:"<div>Content1</div>",windowClass:"modal1",windowTopClass:"modal-top"});expect(l.find("div.modal1")).toHaveClass("modal-top"),expect(l).toHaveModalsOpen(1);var e=t({template:"<div>Content1</div>",windowClass:"modal2",windowTopClass:"modal-top"});expect(l.find("div.modal1")).not.toHaveClass("modal-top"),expect(l.find("div.modal2")).toHaveClass("modal-top"),expect(l).toHaveModalsOpen(2);var a=t({template:"<div>Content1</div>",windowClass:"modal3",windowTopClass:"modal-top"});expect(l.find("div.modal1")).not.toHaveClass("modal-top"),expect(l.find("div.modal2")).not.toHaveClass("modal-top"),expect(l.find("div.modal3")).toHaveClass("modal-top"),expect(l).toHaveModalsOpen(3),n(e),expect(l.find("div.modal1")).not.toHaveClass("modal-top"),expect(l.find("div.modal3")).toHaveClass("modal-top"),expect(l).toHaveModalsOpen(2),o(a),expect(l.find("div.modal1")).toHaveClass("modal-top"),expect(l).toHaveModalsOpen(1)}),it("should have top modal with highest index",function(){var e=null,t=null,n={result:u.defer(),opened:u.defer(),closed:u.defer(),rendered:u.defer(),close:function(e){return m.close(n,e)},dismiss:function(e){return m.dismiss(n,e)}},i={result:u.defer(),opened:u.defer(),closed:u.defer(),rendered:u.defer(),close:function(e){return m.close(i,e)},dismiss:function(e){return m.dismiss(i,e)}},s={result:u.defer(),opened:u.defer(),closed:u.defer(),rendered:u.defer(),close:function(e){return m.close(modal13nstance,e)},dismiss:function(e){return m.dismiss(s,e)}};m.open(n,{appendTo:angular.element(document.body),scope:d.$new(),deferred:n.result,renderDeferred:n.rendered,closedDeferred:n.closed,content:"<div>Modal1</div>"});expect(l).toHaveModalsOpen(0),d.$digest(),a.flush(),expect(l).toHaveModalsOpen(1),expect(parseInt(m.getTop().value.modalDomEl.attr("index"),10)).toEqual(0);m.open(i,{appendTo:angular.element(document.body),scope:d.$new(),deferred:i.result,renderDeferred:i.rendered,closedDeferred:i.closed,content:"<div>Modal2</div>"});i.rendered.promise.then(function(){e=parseInt(m.getTop().value.modalDomEl.attr("index"),10)}),expect(l).toHaveModalsOpen(1),d.$digest(),a.flush(),expect(l).toHaveModalsOpen(2),expect(e).toEqual(1),o(n),expect(l).toHaveModalsOpen(1);m.open(s,{appendTo:angular.element(document.body),scope:d.$new(),deferred:s.result,renderDeferred:s.rendered,closedDeferred:s.closed,content:"<div>Modal3</div>"});s.rendered.promise.then(function(){t=parseInt(m.getTop().value.modalDomEl.attr("index"),10)}),expect(l).toHaveModalsOpen(1),d.$digest(),a.flush(),expect(l).toHaveModalsOpen(2),expect(t).toEqual(2),expect(e).toBeLessThan(t)})}),describe("modal.closing event",function(){it("should close the modal contingent on the modal.closing event and return whether the modal closed",function(){function e(e){e.$on("modal.closing",function(e,t,o){a&&e.preventDefault()})}var a,i,d="<div>content</div>";i=t({template:d,controller:e}),a=!0,expect(o(i,"result",!0)).toBeFalsy(),expect(l).toHaveModalsOpen(1),a=!1,expect(o(i,"result")).toBeTruthy(),expect(l).toHaveModalsOpen(0),i=t({template:d,controller:e}),a=!0,expect(n(i,"result",!0)).toBeFalsy(),expect(l).toHaveModalsOpen(1),a=!1,expect(n(i,"result")).toBeTruthy(),expect(l).toHaveModalsOpen(0)}),it("should trigger modal.closing and pass result/reason and closing parameters to the event",function(){var e;e=!1,o(t({template:"<div>content</div>",controller:function(t){t.$on("modal.closing",function(t,o,n){e=!0,expect(o).toBe("result"),expect(n).toBeTruthy()})}}),"result"),expect(e).toBeTruthy(),e=!1,n(t({template:"<div>content</div>",controller:function(t){t.$on("modal.closing",function(t,o,n){e=!0,expect(o).toBe("reason"),expect(n).toBeFalsy()})}}),"reason"),expect(e).toBeTruthy()})})});